Terminals unused in grammar

    LABEL
    PROC
    NONE
    NUM
    READ


Grammar

    0 $accept: program $end

    1 program: PROGRAM ID ';' declarations compound_statement '.'

    2 identifier_list: ID
    3                | identifier_list ',' ID

    4 declarations: declarations VAR identifier_list ':' INT ';'
    5             | ε

    6 compound_statement: BEG statement_list END

    7 statement_list: statement
    8               | statement_list ';' statement

    9 statement: variable ASSIGN expression
   10          | WRITE '(' variable ')'

   11 variable: ID

   12 expression: simple_expression

   13 simple_expression: term
   14                  | simple_expression ADDOP term

   15 term: factor
   16     | term MULOP factor

   17 factor: variable
   18       | VAL
   19       | '(' expression ')'


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 10 19
    ')' (41) 10 19
    ',' (44) 3
    '.' (46) 1
    ':' (58) 4
    ';' (59) 1 4 8
    error (256)
    PROGRAM (258) 1
    ID (259) 1 2 3 11
    INT (260) 4
    VAR (261) 4
    VAL (262) 18
    LABEL (263)
    PROC (264)
    NONE (265)
    BEG (266) 6
    END (267) 6
    ASSIGN (268) 9
    ADDOP (269) 14
    MULOP (270) 16
    NUM (271)
    WRITE (272) 10
    READ (273)


Nonterminals, with rules where they appear

    $accept (25)
        on left: 0
    program (26)
        on left: 1
        on right: 0
    identifier_list (27)
        on left: 2 3
        on right: 3 4
    declarations (28)
        on left: 4 5
        on right: 1 4
    compound_statement (29)
        on left: 6
        on right: 1
    statement_list (30)
        on left: 7 8
        on right: 6 8
    statement (31)
        on left: 9 10
        on right: 7 8
    variable (32)
        on left: 11
        on right: 9 10 17
    expression (33)
        on left: 12
        on right: 9 19
    simple_expression (34)
        on left: 13 14
        on right: 12 14
    term (35)
        on left: 15 16
        on right: 13 14 16
    factor (36)
        on left: 17 18 19
        on right: 15 16


State 0

    0 $accept: • program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    1 program: PROGRAM • ID ';' declarations compound_statement '.'

    ID  shift, and go to state 3


State 2

    0 $accept: program • $end

    $end  shift, and go to state 4


State 3

    1 program: PROGRAM ID • ';' declarations compound_statement '.'

    ';'  shift, and go to state 5


State 4

    0 $accept: program $end •

    $default  accept


State 5

    1 program: PROGRAM ID ';' • declarations compound_statement '.'

    $default  reduce using rule 5 (declarations)

    declarations  go to state 6


State 6

    1 program: PROGRAM ID ';' declarations • compound_statement '.'
    4 declarations: declarations • VAR identifier_list ':' INT ';'

    VAR  shift, and go to state 7
    BEG  shift, and go to state 8

    compound_statement  go to state 9


State 7

    4 declarations: declarations VAR • identifier_list ':' INT ';'

    ID  shift, and go to state 10

    identifier_list  go to state 11


State 8

    6 compound_statement: BEG • statement_list END

    ID     shift, and go to state 12
    WRITE  shift, and go to state 13

    statement_list  go to state 14
    statement       go to state 15
    variable        go to state 16


State 9

    1 program: PROGRAM ID ';' declarations compound_statement • '.'

    '.'  shift, and go to state 17


State 10

    2 identifier_list: ID •

    $default  reduce using rule 2 (identifier_list)


State 11

    3 identifier_list: identifier_list • ',' ID
    4 declarations: declarations VAR identifier_list • ':' INT ';'

    ','  shift, and go to state 18
    ':'  shift, and go to state 19


State 12

   11 variable: ID •

    $default  reduce using rule 11 (variable)


State 13

   10 statement: WRITE • '(' variable ')'

    '('  shift, and go to state 20


State 14

    6 compound_statement: BEG statement_list • END
    8 statement_list: statement_list • ';' statement

    END  shift, and go to state 21
    ';'  shift, and go to state 22


State 15

    7 statement_list: statement •

    $default  reduce using rule 7 (statement_list)


State 16

    9 statement: variable • ASSIGN expression

    ASSIGN  shift, and go to state 23


State 17

    1 program: PROGRAM ID ';' declarations compound_statement '.' •

    $default  reduce using rule 1 (program)


State 18

    3 identifier_list: identifier_list ',' • ID

    ID  shift, and go to state 24


State 19

    4 declarations: declarations VAR identifier_list ':' • INT ';'

    INT  shift, and go to state 25


State 20

   10 statement: WRITE '(' • variable ')'

    ID  shift, and go to state 12

    variable  go to state 26


State 21

    6 compound_statement: BEG statement_list END •

    $default  reduce using rule 6 (compound_statement)


State 22

    8 statement_list: statement_list ';' • statement

    ID     shift, and go to state 12
    WRITE  shift, and go to state 13

    statement  go to state 27
    variable   go to state 16


State 23

    9 statement: variable ASSIGN • expression

    ID   shift, and go to state 12
    VAL  shift, and go to state 28
    '('  shift, and go to state 29

    variable           go to state 30
    expression         go to state 31
    simple_expression  go to state 32
    term               go to state 33
    factor             go to state 34


State 24

    3 identifier_list: identifier_list ',' ID •

    $default  reduce using rule 3 (identifier_list)


State 25

    4 declarations: declarations VAR identifier_list ':' INT • ';'

    ';'  shift, and go to state 35


State 26

   10 statement: WRITE '(' variable • ')'

    ')'  shift, and go to state 36


State 27

    8 statement_list: statement_list ';' statement •

    $default  reduce using rule 8 (statement_list)


State 28

   18 factor: VAL •

    $default  reduce using rule 18 (factor)


State 29

   19 factor: '(' • expression ')'

    ID   shift, and go to state 12
    VAL  shift, and go to state 28
    '('  shift, and go to state 29

    variable           go to state 30
    expression         go to state 37
    simple_expression  go to state 32
    term               go to state 33
    factor             go to state 34


State 30

   17 factor: variable •

    $default  reduce using rule 17 (factor)


State 31

    9 statement: variable ASSIGN expression •

    $default  reduce using rule 9 (statement)


State 32

   12 expression: simple_expression •
   14 simple_expression: simple_expression • ADDOP term

    ADDOP  shift, and go to state 38

    $default  reduce using rule 12 (expression)


State 33

   13 simple_expression: term •
   16 term: term • MULOP factor

    MULOP  shift, and go to state 39

    $default  reduce using rule 13 (simple_expression)


State 34

   15 term: factor •

    $default  reduce using rule 15 (term)


State 35

    4 declarations: declarations VAR identifier_list ':' INT ';' •

    $default  reduce using rule 4 (declarations)


State 36

   10 statement: WRITE '(' variable ')' •

    $default  reduce using rule 10 (statement)


State 37

   19 factor: '(' expression • ')'

    ')'  shift, and go to state 40


State 38

   14 simple_expression: simple_expression ADDOP • term

    ID   shift, and go to state 12
    VAL  shift, and go to state 28
    '('  shift, and go to state 29

    variable  go to state 30
    term      go to state 41
    factor    go to state 34


State 39

   16 term: term MULOP • factor

    ID   shift, and go to state 12
    VAL  shift, and go to state 28
    '('  shift, and go to state 29

    variable  go to state 30
    factor    go to state 42


State 40

   19 factor: '(' expression ')' •

    $default  reduce using rule 19 (factor)


State 41

   14 simple_expression: simple_expression ADDOP term •
   16 term: term • MULOP factor

    MULOP  shift, and go to state 39

    $default  reduce using rule 14 (simple_expression)


State 42

   16 term: term MULOP factor •

    $default  reduce using rule 16 (term)
