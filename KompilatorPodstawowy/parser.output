Terminals unused in grammar

    LABEL
    NONE
    PROC


Grammar

    0 $accept: program $end

    1 $@1: ε

    2 $@2: ε

    3 program: PROGRAM ID $@1 '(' program_arguments ')' ';' vars $@2 BEG function_body END '.' DONE

    4 program_arguments: ID
    5                  | program_arguments ',' ID

    6 vars: vars VAR var_list ':' INT ';'
    7     | ε

    8 var_list: ID
    9         | var_list ',' ID

   10 function_body: statements
   11              | ε

   12 statements: statements ';' statement
   13           | statement

   14 statement: ID ASSIGN expression
   15          | read
   16          | write

   17 expression: term
   18           | ADDOP term
   19           | expression ADDOP term

   20 term: factor
   21     | term MULOP factor

   22 factor: ID
   23       | VAL
   24       | '(' expression ')'

   25 expression_list: expression_list ',' expression
   26                | expression

   27 read: READ '(' expression_list ')'

   28 write: WRITE '(' expression_list ')'


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 3 24 27 28
    ')' (41) 3 24 27 28
    ',' (44) 5 9 25
    '.' (46) 3
    ':' (58) 6
    ';' (59) 3 6 12
    error (256)
    PROGRAM (258) 3
    BEG (259) 3
    END (260) 3
    WRITE (261) 28
    READ (262) 27
    ASSIGN (263) 14
    ADDOP (264) 18 19
    MULOP (265) 21
    INT (266) 6
    VAL (267) 23
    VAR (268) 6
    ID (269) 3 4 5 8 9 14 22
    LABEL (270)
    NONE (271)
    DONE (272) 3
    PROC (273)


Nonterminals, with rules where they appear

    $accept (25)
        on left: 0
    program (26)
        on left: 3
        on right: 0
    $@1 (27)
        on left: 1
        on right: 3
    $@2 (28)
        on left: 2
        on right: 3
    program_arguments (29)
        on left: 4 5
        on right: 3 5
    vars (30)
        on left: 6 7
        on right: 3 6
    var_list (31)
        on left: 8 9
        on right: 6 9
    function_body (32)
        on left: 10 11
        on right: 3
    statements (33)
        on left: 12 13
        on right: 10 12
    statement (34)
        on left: 14 15 16
        on right: 12 13
    expression (35)
        on left: 17 18 19
        on right: 14 19 24 25 26
    term (36)
        on left: 20 21
        on right: 17 18 19 21
    factor (37)
        on left: 22 23 24
        on right: 20 21
    expression_list (38)
        on left: 25 26
        on right: 25 27 28
    read (39)
        on left: 27
        on right: 15
    write (40)
        on left: 28
        on right: 16


State 0

    0 $accept: • program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    3 program: PROGRAM • ID $@1 '(' program_arguments ')' ';' vars $@2 BEG function_body END '.' DONE

    ID  shift, and go to state 3


State 2

    0 $accept: program • $end

    $end  shift, and go to state 4


State 3

    3 program: PROGRAM ID • $@1 '(' program_arguments ')' ';' vars $@2 BEG function_body END '.' DONE

    $default  reduce using rule 1 ($@1)

    $@1  go to state 5


State 4

    0 $accept: program $end •

    $default  accept


State 5

    3 program: PROGRAM ID $@1 • '(' program_arguments ')' ';' vars $@2 BEG function_body END '.' DONE

    '('  shift, and go to state 6


State 6

    3 program: PROGRAM ID $@1 '(' • program_arguments ')' ';' vars $@2 BEG function_body END '.' DONE

    ID  shift, and go to state 7

    program_arguments  go to state 8


State 7

    4 program_arguments: ID •

    $default  reduce using rule 4 (program_arguments)


State 8

    3 program: PROGRAM ID $@1 '(' program_arguments • ')' ';' vars $@2 BEG function_body END '.' DONE
    5 program_arguments: program_arguments • ',' ID

    ')'  shift, and go to state 9
    ','  shift, and go to state 10


State 9

    3 program: PROGRAM ID $@1 '(' program_arguments ')' • ';' vars $@2 BEG function_body END '.' DONE

    ';'  shift, and go to state 11


State 10

    5 program_arguments: program_arguments ',' • ID

    ID  shift, and go to state 12


State 11

    3 program: PROGRAM ID $@1 '(' program_arguments ')' ';' • vars $@2 BEG function_body END '.' DONE

    $default  reduce using rule 7 (vars)

    vars  go to state 13


State 12

    5 program_arguments: program_arguments ',' ID •

    $default  reduce using rule 5 (program_arguments)


State 13

    3 program: PROGRAM ID $@1 '(' program_arguments ')' ';' vars • $@2 BEG function_body END '.' DONE
    6 vars: vars • VAR var_list ':' INT ';'

    VAR  shift, and go to state 14

    $default  reduce using rule 2 ($@2)

    $@2  go to state 15


State 14

    6 vars: vars VAR • var_list ':' INT ';'

    ID  shift, and go to state 16

    var_list  go to state 17


State 15

    3 program: PROGRAM ID $@1 '(' program_arguments ')' ';' vars $@2 • BEG function_body END '.' DONE

    BEG  shift, and go to state 18


State 16

    8 var_list: ID •

    $default  reduce using rule 8 (var_list)


State 17

    6 vars: vars VAR var_list • ':' INT ';'
    9 var_list: var_list • ',' ID

    ','  shift, and go to state 19
    ':'  shift, and go to state 20


State 18

    3 program: PROGRAM ID $@1 '(' program_arguments ')' ';' vars $@2 BEG • function_body END '.' DONE

    WRITE  shift, and go to state 21
    READ   shift, and go to state 22
    ID     shift, and go to state 23

    $default  reduce using rule 11 (function_body)

    function_body  go to state 24
    statements     go to state 25
    statement      go to state 26
    read           go to state 27
    write          go to state 28


State 19

    9 var_list: var_list ',' • ID

    ID  shift, and go to state 29


State 20

    6 vars: vars VAR var_list ':' • INT ';'

    INT  shift, and go to state 30


State 21

   28 write: WRITE • '(' expression_list ')'

    '('  shift, and go to state 31


State 22

   27 read: READ • '(' expression_list ')'

    '('  shift, and go to state 32


State 23

   14 statement: ID • ASSIGN expression

    ASSIGN  shift, and go to state 33


State 24

    3 program: PROGRAM ID $@1 '(' program_arguments ')' ';' vars $@2 BEG function_body • END '.' DONE

    END  shift, and go to state 34


State 25

   10 function_body: statements •
   12 statements: statements • ';' statement

    ';'  shift, and go to state 35

    $default  reduce using rule 10 (function_body)


State 26

   13 statements: statement •

    $default  reduce using rule 13 (statements)


State 27

   15 statement: read •

    $default  reduce using rule 15 (statement)


State 28

   16 statement: write •

    $default  reduce using rule 16 (statement)


State 29

    9 var_list: var_list ',' ID •

    $default  reduce using rule 9 (var_list)


State 30

    6 vars: vars VAR var_list ':' INT • ';'

    ';'  shift, and go to state 36


State 31

   28 write: WRITE '(' • expression_list ')'

    ADDOP  shift, and go to state 37
    VAL    shift, and go to state 38
    ID     shift, and go to state 39
    '('    shift, and go to state 40

    expression       go to state 41
    term             go to state 42
    factor           go to state 43
    expression_list  go to state 44


State 32

   27 read: READ '(' • expression_list ')'

    ADDOP  shift, and go to state 37
    VAL    shift, and go to state 38
    ID     shift, and go to state 39
    '('    shift, and go to state 40

    expression       go to state 41
    term             go to state 42
    factor           go to state 43
    expression_list  go to state 45


State 33

   14 statement: ID ASSIGN • expression

    ADDOP  shift, and go to state 37
    VAL    shift, and go to state 38
    ID     shift, and go to state 39
    '('    shift, and go to state 40

    expression  go to state 46
    term        go to state 42
    factor      go to state 43


State 34

    3 program: PROGRAM ID $@1 '(' program_arguments ')' ';' vars $@2 BEG function_body END • '.' DONE

    '.'  shift, and go to state 47


State 35

   12 statements: statements ';' • statement

    WRITE  shift, and go to state 21
    READ   shift, and go to state 22
    ID     shift, and go to state 23

    statement  go to state 48
    read       go to state 27
    write      go to state 28


State 36

    6 vars: vars VAR var_list ':' INT ';' •

    $default  reduce using rule 6 (vars)


State 37

   18 expression: ADDOP • term

    VAL  shift, and go to state 38
    ID   shift, and go to state 39
    '('  shift, and go to state 40

    term    go to state 49
    factor  go to state 43


State 38

   23 factor: VAL •

    $default  reduce using rule 23 (factor)


State 39

   22 factor: ID •

    $default  reduce using rule 22 (factor)


State 40

   24 factor: '(' • expression ')'

    ADDOP  shift, and go to state 37
    VAL    shift, and go to state 38
    ID     shift, and go to state 39
    '('    shift, and go to state 40

    expression  go to state 50
    term        go to state 42
    factor      go to state 43


State 41

   19 expression: expression • ADDOP term
   26 expression_list: expression •

    ADDOP  shift, and go to state 51

    $default  reduce using rule 26 (expression_list)


State 42

   17 expression: term •
   21 term: term • MULOP factor

    MULOP  shift, and go to state 52

    $default  reduce using rule 17 (expression)


State 43

   20 term: factor •

    $default  reduce using rule 20 (term)


State 44

   25 expression_list: expression_list • ',' expression
   28 write: WRITE '(' expression_list • ')'

    ')'  shift, and go to state 53
    ','  shift, and go to state 54


State 45

   25 expression_list: expression_list • ',' expression
   27 read: READ '(' expression_list • ')'

    ')'  shift, and go to state 55
    ','  shift, and go to state 54


State 46

   14 statement: ID ASSIGN expression •
   19 expression: expression • ADDOP term

    ADDOP  shift, and go to state 51

    $default  reduce using rule 14 (statement)


State 47

    3 program: PROGRAM ID $@1 '(' program_arguments ')' ';' vars $@2 BEG function_body END '.' • DONE

    DONE  shift, and go to state 56


State 48

   12 statements: statements ';' statement •

    $default  reduce using rule 12 (statements)


State 49

   18 expression: ADDOP term •
   21 term: term • MULOP factor

    MULOP  shift, and go to state 52

    $default  reduce using rule 18 (expression)


State 50

   19 expression: expression • ADDOP term
   24 factor: '(' expression • ')'

    ADDOP  shift, and go to state 51
    ')'    shift, and go to state 57


State 51

   19 expression: expression ADDOP • term

    VAL  shift, and go to state 38
    ID   shift, and go to state 39
    '('  shift, and go to state 40

    term    go to state 58
    factor  go to state 43


State 52

   21 term: term MULOP • factor

    VAL  shift, and go to state 38
    ID   shift, and go to state 39
    '('  shift, and go to state 40

    factor  go to state 59


State 53

   28 write: WRITE '(' expression_list ')' •

    $default  reduce using rule 28 (write)


State 54

   25 expression_list: expression_list ',' • expression

    ADDOP  shift, and go to state 37
    VAL    shift, and go to state 38
    ID     shift, and go to state 39
    '('    shift, and go to state 40

    expression  go to state 60
    term        go to state 42
    factor      go to state 43


State 55

   27 read: READ '(' expression_list ')' •

    $default  reduce using rule 27 (read)


State 56

    3 program: PROGRAM ID $@1 '(' program_arguments ')' ';' vars $@2 BEG function_body END '.' DONE •

    $default  reduce using rule 3 (program)


State 57

   24 factor: '(' expression ')' •

    $default  reduce using rule 24 (factor)


State 58

   19 expression: expression ADDOP term •
   21 term: term • MULOP factor

    MULOP  shift, and go to state 52

    $default  reduce using rule 19 (expression)


State 59

   21 term: term MULOP factor •

    $default  reduce using rule 21 (term)


State 60

   19 expression: expression • ADDOP term
   25 expression_list: expression_list ',' expression •

    ADDOP  shift, and go to state 51

    $default  reduce using rule 25 (expression_list)
