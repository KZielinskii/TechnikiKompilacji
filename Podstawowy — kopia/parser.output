Terminals unused in grammar

    LABEL
    NONE
    PROC


Grammar

    0 $accept: program $end

    1 $@1: ε

    2 $@2: ε

    3 program: PROGRAM ID $@1 '(' program_arguments ')' ';' vars $@2 BEG function_body END '.' DONE

    4 program_arguments: ID
    5                  | program_arguments ',' ID

    6 vars: vars VAR vars ':' type ';'
    7     | ε

    8 type: INT
    9     | REAL

   10 vars: ID
   11     | vars ',' ID

   12 function_body: statements
   13              | ε

   14 statements: statements ';' statement
   15           | statement

   16 statement: ID ASSIGN expression
   17          | read
   18          | write

   19 expression: term
   20           | ADDOP term
   21           | expression ADDOP term

   22 term: factor
   23     | term MULOP factor

   24 factor: ID
   25       | VAL
   26       | '(' expression ')'

   27 expression_list: expression_list ',' expression
   28                | expression

   29 read: READ '(' expression_list ')'

   30 write: WRITE '(' expression_list ')'


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 3 26 29 30
    ')' (41) 3 26 29 30
    ',' (44) 5 11 27
    '.' (46) 3
    ':' (58) 6
    ';' (59) 3 6 14
    error (256)
    PROGRAM (258) 3
    BEG (259) 3
    END (260) 3
    WRITE (261) 30
    READ (262) 29
    ASSIGN (263) 16
    ADDOP (264) 20 21
    MULOP (265) 23
    INT (266) 8
    REAL (267) 9
    VAL (268) 25
    VAR (269) 6
    ID (270) 3 4 5 10 11 16 24
    LABEL (271)
    NONE (272)
    DONE (273) 3
    PROC (274)


Nonterminals, with rules where they appear

    $accept (26)
        on left: 0
    program (27)
        on left: 3
        on right: 0
    $@1 (28)
        on left: 1
        on right: 3
    $@2 (29)
        on left: 2
        on right: 3
    program_arguments (30)
        on left: 4 5
        on right: 3 5
    vars (31)
        on left: 6 7 10 11
        on right: 3 6 11
    type (32)
        on left: 8 9
        on right: 6
    function_body (33)
        on left: 12 13
        on right: 3
    statements (34)
        on left: 14 15
        on right: 12 14
    statement (35)
        on left: 16 17 18
        on right: 14 15
    expression (36)
        on left: 19 20 21
        on right: 16 21 26 27 28
    term (37)
        on left: 22 23
        on right: 19 20 21 23
    factor (38)
        on left: 24 25 26
        on right: 22 23
    expression_list (39)
        on left: 27 28
        on right: 27 29 30
    read (40)
        on left: 29
        on right: 17
    write (41)
        on left: 30
        on right: 18


State 0

    0 $accept: • program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    3 program: PROGRAM • ID $@1 '(' program_arguments ')' ';' vars $@2 BEG function_body END '.' DONE

    ID  shift, and go to state 3


State 2

    0 $accept: program • $end

    $end  shift, and go to state 4


State 3

    3 program: PROGRAM ID • $@1 '(' program_arguments ')' ';' vars $@2 BEG function_body END '.' DONE

    $default  reduce using rule 1 ($@1)

    $@1  go to state 5


State 4

    0 $accept: program $end •

    $default  accept


State 5

    3 program: PROGRAM ID $@1 • '(' program_arguments ')' ';' vars $@2 BEG function_body END '.' DONE

    '('  shift, and go to state 6


State 6

    3 program: PROGRAM ID $@1 '(' • program_arguments ')' ';' vars $@2 BEG function_body END '.' DONE

    ID  shift, and go to state 7

    program_arguments  go to state 8


State 7

    4 program_arguments: ID •

    $default  reduce using rule 4 (program_arguments)


State 8

    3 program: PROGRAM ID $@1 '(' program_arguments • ')' ';' vars $@2 BEG function_body END '.' DONE
    5 program_arguments: program_arguments • ',' ID

    ')'  shift, and go to state 9
    ','  shift, and go to state 10


State 9

    3 program: PROGRAM ID $@1 '(' program_arguments ')' • ';' vars $@2 BEG function_body END '.' DONE

    ';'  shift, and go to state 11


State 10

    5 program_arguments: program_arguments ',' • ID

    ID  shift, and go to state 12


State 11

    3 program: PROGRAM ID $@1 '(' program_arguments ')' ';' • vars $@2 BEG function_body END '.' DONE

    ID  shift, and go to state 13

    $default  reduce using rule 7 (vars)

    vars  go to state 14


State 12

    5 program_arguments: program_arguments ',' ID •

    $default  reduce using rule 5 (program_arguments)


State 13

   10 vars: ID •

    $default  reduce using rule 10 (vars)


State 14

    3 program: PROGRAM ID $@1 '(' program_arguments ')' ';' vars • $@2 BEG function_body END '.' DONE
    6 vars: vars • VAR vars ':' type ';'
   11     | vars • ',' ID

    VAR  shift, and go to state 15
    ','  shift, and go to state 16

    $default  reduce using rule 2 ($@2)

    $@2  go to state 17


State 15

    6 vars: vars VAR • vars ':' type ';'

    ID  shift, and go to state 13

    $default  reduce using rule 7 (vars)

    vars  go to state 18


State 16

   11 vars: vars ',' • ID

    ID  shift, and go to state 19


State 17

    3 program: PROGRAM ID $@1 '(' program_arguments ')' ';' vars $@2 • BEG function_body END '.' DONE

    BEG  shift, and go to state 20


State 18

    6 vars: vars • VAR vars ':' type ';'
    6     | vars VAR vars • ':' type ';'
   11     | vars • ',' ID

    VAR  shift, and go to state 15
    ','  shift, and go to state 16
    ':'  shift, and go to state 21


State 19

   11 vars: vars ',' ID •

    $default  reduce using rule 11 (vars)


State 20

    3 program: PROGRAM ID $@1 '(' program_arguments ')' ';' vars $@2 BEG • function_body END '.' DONE

    WRITE  shift, and go to state 22
    READ   shift, and go to state 23
    ID     shift, and go to state 24

    $default  reduce using rule 13 (function_body)

    function_body  go to state 25
    statements     go to state 26
    statement      go to state 27
    read           go to state 28
    write          go to state 29


State 21

    6 vars: vars VAR vars ':' • type ';'

    INT   shift, and go to state 30
    REAL  shift, and go to state 31

    type  go to state 32


State 22

   30 write: WRITE • '(' expression_list ')'

    '('  shift, and go to state 33


State 23

   29 read: READ • '(' expression_list ')'

    '('  shift, and go to state 34


State 24

   16 statement: ID • ASSIGN expression

    ASSIGN  shift, and go to state 35


State 25

    3 program: PROGRAM ID $@1 '(' program_arguments ')' ';' vars $@2 BEG function_body • END '.' DONE

    END  shift, and go to state 36


State 26

   12 function_body: statements •
   14 statements: statements • ';' statement

    ';'  shift, and go to state 37

    $default  reduce using rule 12 (function_body)


State 27

   15 statements: statement •

    $default  reduce using rule 15 (statements)


State 28

   17 statement: read •

    $default  reduce using rule 17 (statement)


State 29

   18 statement: write •

    $default  reduce using rule 18 (statement)


State 30

    8 type: INT •

    $default  reduce using rule 8 (type)


State 31

    9 type: REAL •

    $default  reduce using rule 9 (type)


State 32

    6 vars: vars VAR vars ':' type • ';'

    ';'  shift, and go to state 38


State 33

   30 write: WRITE '(' • expression_list ')'

    ADDOP  shift, and go to state 39
    VAL    shift, and go to state 40
    ID     shift, and go to state 41
    '('    shift, and go to state 42

    expression       go to state 43
    term             go to state 44
    factor           go to state 45
    expression_list  go to state 46


State 34

   29 read: READ '(' • expression_list ')'

    ADDOP  shift, and go to state 39
    VAL    shift, and go to state 40
    ID     shift, and go to state 41
    '('    shift, and go to state 42

    expression       go to state 43
    term             go to state 44
    factor           go to state 45
    expression_list  go to state 47


State 35

   16 statement: ID ASSIGN • expression

    ADDOP  shift, and go to state 39
    VAL    shift, and go to state 40
    ID     shift, and go to state 41
    '('    shift, and go to state 42

    expression  go to state 48
    term        go to state 44
    factor      go to state 45


State 36

    3 program: PROGRAM ID $@1 '(' program_arguments ')' ';' vars $@2 BEG function_body END • '.' DONE

    '.'  shift, and go to state 49


State 37

   14 statements: statements ';' • statement

    WRITE  shift, and go to state 22
    READ   shift, and go to state 23
    ID     shift, and go to state 24

    statement  go to state 50
    read       go to state 28
    write      go to state 29


State 38

    6 vars: vars VAR vars ':' type ';' •

    $default  reduce using rule 6 (vars)


State 39

   20 expression: ADDOP • term

    VAL  shift, and go to state 40
    ID   shift, and go to state 41
    '('  shift, and go to state 42

    term    go to state 51
    factor  go to state 45


State 40

   25 factor: VAL •

    $default  reduce using rule 25 (factor)


State 41

   24 factor: ID •

    $default  reduce using rule 24 (factor)


State 42

   26 factor: '(' • expression ')'

    ADDOP  shift, and go to state 39
    VAL    shift, and go to state 40
    ID     shift, and go to state 41
    '('    shift, and go to state 42

    expression  go to state 52
    term        go to state 44
    factor      go to state 45


State 43

   21 expression: expression • ADDOP term
   28 expression_list: expression •

    ADDOP  shift, and go to state 53

    $default  reduce using rule 28 (expression_list)


State 44

   19 expression: term •
   23 term: term • MULOP factor

    MULOP  shift, and go to state 54

    $default  reduce using rule 19 (expression)


State 45

   22 term: factor •

    $default  reduce using rule 22 (term)


State 46

   27 expression_list: expression_list • ',' expression
   30 write: WRITE '(' expression_list • ')'

    ')'  shift, and go to state 55
    ','  shift, and go to state 56


State 47

   27 expression_list: expression_list • ',' expression
   29 read: READ '(' expression_list • ')'

    ')'  shift, and go to state 57
    ','  shift, and go to state 56


State 48

   16 statement: ID ASSIGN expression •
   21 expression: expression • ADDOP term

    ADDOP  shift, and go to state 53

    $default  reduce using rule 16 (statement)


State 49

    3 program: PROGRAM ID $@1 '(' program_arguments ')' ';' vars $@2 BEG function_body END '.' • DONE

    DONE  shift, and go to state 58


State 50

   14 statements: statements ';' statement •

    $default  reduce using rule 14 (statements)


State 51

   20 expression: ADDOP term •
   23 term: term • MULOP factor

    MULOP  shift, and go to state 54

    $default  reduce using rule 20 (expression)


State 52

   21 expression: expression • ADDOP term
   26 factor: '(' expression • ')'

    ADDOP  shift, and go to state 53
    ')'    shift, and go to state 59


State 53

   21 expression: expression ADDOP • term

    VAL  shift, and go to state 40
    ID   shift, and go to state 41
    '('  shift, and go to state 42

    term    go to state 60
    factor  go to state 45


State 54

   23 term: term MULOP • factor

    VAL  shift, and go to state 40
    ID   shift, and go to state 41
    '('  shift, and go to state 42

    factor  go to state 61


State 55

   30 write: WRITE '(' expression_list ')' •

    $default  reduce using rule 30 (write)


State 56

   27 expression_list: expression_list ',' • expression

    ADDOP  shift, and go to state 39
    VAL    shift, and go to state 40
    ID     shift, and go to state 41
    '('    shift, and go to state 42

    expression  go to state 62
    term        go to state 44
    factor      go to state 45


State 57

   29 read: READ '(' expression_list ')' •

    $default  reduce using rule 29 (read)


State 58

    3 program: PROGRAM ID $@1 '(' program_arguments ')' ';' vars $@2 BEG function_body END '.' DONE •

    $default  reduce using rule 3 (program)


State 59

   26 factor: '(' expression ')' •

    $default  reduce using rule 26 (factor)


State 60

   21 expression: expression ADDOP term •
   23 term: term • MULOP factor

    MULOP  shift, and go to state 54

    $default  reduce using rule 21 (expression)


State 61

   23 term: term MULOP factor •

    $default  reduce using rule 23 (term)


State 62

   21 expression: expression • ADDOP term
   27 expression_list: expression_list ',' expression •

    ADDOP  shift, and go to state 53

    $default  reduce using rule 27 (expression_list)
