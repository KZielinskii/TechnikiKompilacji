Terminals unused in grammar

    LABEL
    PROC
    NONE


Grammar

    0 $accept: program $end

    1 $@1: ε

    2 $@2: ε

    3 $@3: ε

    4 program: PROGRAM ID $@1 '(' identifier_list ')' ';' $@2 declarations subprogram_declarations $@3 compound_statement '.'

    5 identifier_list: ID
    6                | identifier_list ',' ID

    7 declarations: declarations VAR identifier_list ':' type ';'
    8             | ε

    9 type: standerd_type

   10 standerd_type: INT
   11              | REAL

   12 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   13                        | ε

   14 $@4: ε

   15 subprogram_declaration: subprogram_head $@4 declarations compound_statement

   16 $@5: ε

   17 subprogram_head: FUNCTION ID $@5 arguments ':' standerd_type ';'

   18 $@6: ε

   19 subprogram_head: PROCEDURE ID $@6 arguments ';'

   20 arguments: '(' parametr_list ')'
   21          | ε

   22 parametr_list: parametr
   23              | parametr_list ';' parametr

   24 parametr: identifier_list ':' type

   25 compound_statement: BEG optional_statments END

   26 optional_statments: statement_list
   27                   | ε

   28 statement_list: statement
   29               | statement_list ';' statement

   30 statement: variable ASSIGN expression
   31          | procedure_statement
   32          | compound_statement

   33 @7: ε

   34 @8: ε

   35 @9: ε

   36 statement: IF expression @7 THEN @8 statement ELSE @9 statement

   37 @10: ε

   38 @11: ε

   39 @12: ε

   40 statement: @10 WHILE @11 expression DO @12 statement
   41          | READ '(' expression_list ')'
   42          | WRITE '(' expression_list ')'

   43 variable: ID

   44 procedure_statement: ID
   45                    | ID '(' expression_list ')'

   46 expression_list: expression
   47                | expression_list ',' expression

   48 expression: simple_expression
   49           | simple_expression RELOP simple_expression

   50 simple_expression: term
   51                  | ADDOP term
   52                  | simple_expression ADDOP term
   53                  | simple_expression AND_ term
   54                  | simple_expression OR_ term

   55 term: factor
   56     | term MULOP factor

   57 factor: variable
   58       | ID '(' expression_list ')'
   59       | NUM
   60       | '(' expression ')'
   61       | NOT factor


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 4 20 41 42 45 58 60
    ')' (41) 4 20 41 42 45 58 60
    ',' (44) 6 47
    '.' (46) 4
    ':' (58) 7 17 24
    ';' (59) 4 7 12 17 19 23 29
    error (256)
    PROGRAM (258) 4
    ID (259) 4 5 6 17 19 43 44 45 58
    INT (260) 10
    REAL (261) 11
    VAR (262) 7
    NUM (263) 59
    LABEL (264)
    PROC (265)
    NONE (266)
    BEG (267) 25
    END (268) 25
    ASSIGN (269) 30
    ADDOP (270) 51 52
    MULOP (271) 56
    WRITE (272) 42
    READ (273) 41
    IF (274) 36
    THEN (275) 36
    ELSE (276) 36
    WHILE (277) 40
    DO (278) 40
    RELOP (279) 49
    NOT (280) 61
    FUNCTION (281) 17
    PROCEDURE (282) 19
    OR_ (283) 54
    AND_ (284) 53


Nonterminals, with rules where they appear

    $accept (36)
        on left: 0
    program (37)
        on left: 4
        on right: 0
    $@1 (38)
        on left: 1
        on right: 4
    $@2 (39)
        on left: 2
        on right: 4
    $@3 (40)
        on left: 3
        on right: 4
    identifier_list (41)
        on left: 5 6
        on right: 4 6 7 24
    declarations (42)
        on left: 7 8
        on right: 4 7 15
    type (43)
        on left: 9
        on right: 7 24
    standerd_type (44)
        on left: 10 11
        on right: 9 17
    subprogram_declarations (45)
        on left: 12 13
        on right: 4 12
    subprogram_declaration (46)
        on left: 15
        on right: 12
    $@4 (47)
        on left: 14
        on right: 15
    subprogram_head (48)
        on left: 17 19
        on right: 15
    $@5 (49)
        on left: 16
        on right: 17
    $@6 (50)
        on left: 18
        on right: 19
    arguments (51)
        on left: 20 21
        on right: 17 19
    parametr_list (52)
        on left: 22 23
        on right: 20 23
    parametr (53)
        on left: 24
        on right: 22 23
    compound_statement (54)
        on left: 25
        on right: 4 15 32
    optional_statments (55)
        on left: 26 27
        on right: 25
    statement_list (56)
        on left: 28 29
        on right: 26 29
    statement (57)
        on left: 30 31 32 36 40 41 42
        on right: 28 29 36 40
    @7 (58)
        on left: 33
        on right: 36
    @8 (59)
        on left: 34
        on right: 36
    @9 (60)
        on left: 35
        on right: 36
    @10 (61)
        on left: 37
        on right: 40
    @11 (62)
        on left: 38
        on right: 40
    @12 (63)
        on left: 39
        on right: 40
    variable (64)
        on left: 43
        on right: 30 57
    procedure_statement (65)
        on left: 44 45
        on right: 31
    expression_list (66)
        on left: 46 47
        on right: 41 42 45 47 58
    expression (67)
        on left: 48 49
        on right: 30 36 40 46 47 60
    simple_expression (68)
        on left: 50 51 52 53 54
        on right: 48 49 52 53 54
    term (69)
        on left: 55 56
        on right: 50 51 52 53 54 56
    factor (70)
        on left: 57 58 59 60 61
        on right: 55 56 61


State 0

    0 $accept: • program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    4 program: PROGRAM • ID $@1 '(' identifier_list ')' ';' $@2 declarations subprogram_declarations $@3 compound_statement '.'

    ID  shift, and go to state 3


State 2

    0 $accept: program • $end

    $end  shift, and go to state 4


State 3

    4 program: PROGRAM ID • $@1 '(' identifier_list ')' ';' $@2 declarations subprogram_declarations $@3 compound_statement '.'

    $default  reduce using rule 1 ($@1)

    $@1  go to state 5


State 4

    0 $accept: program $end •

    $default  accept


State 5

    4 program: PROGRAM ID $@1 • '(' identifier_list ')' ';' $@2 declarations subprogram_declarations $@3 compound_statement '.'

    '('  shift, and go to state 6


State 6

    4 program: PROGRAM ID $@1 '(' • identifier_list ')' ';' $@2 declarations subprogram_declarations $@3 compound_statement '.'

    ID  shift, and go to state 7

    identifier_list  go to state 8


State 7

    5 identifier_list: ID •

    $default  reduce using rule 5 (identifier_list)


State 8

    4 program: PROGRAM ID $@1 '(' identifier_list • ')' ';' $@2 declarations subprogram_declarations $@3 compound_statement '.'
    6 identifier_list: identifier_list • ',' ID

    ')'  shift, and go to state 9
    ','  shift, and go to state 10


State 9

    4 program: PROGRAM ID $@1 '(' identifier_list ')' • ';' $@2 declarations subprogram_declarations $@3 compound_statement '.'

    ';'  shift, and go to state 11


State 10

    6 identifier_list: identifier_list ',' • ID

    ID  shift, and go to state 12


State 11

    4 program: PROGRAM ID $@1 '(' identifier_list ')' ';' • $@2 declarations subprogram_declarations $@3 compound_statement '.'

    $default  reduce using rule 2 ($@2)

    $@2  go to state 13


State 12

    6 identifier_list: identifier_list ',' ID •

    $default  reduce using rule 6 (identifier_list)


State 13

    4 program: PROGRAM ID $@1 '(' identifier_list ')' ';' $@2 • declarations subprogram_declarations $@3 compound_statement '.'

    $default  reduce using rule 8 (declarations)

    declarations  go to state 14


State 14

    4 program: PROGRAM ID $@1 '(' identifier_list ')' ';' $@2 declarations • subprogram_declarations $@3 compound_statement '.'
    7 declarations: declarations • VAR identifier_list ':' type ';'

    VAR  shift, and go to state 15

    $default  reduce using rule 13 (subprogram_declarations)

    subprogram_declarations  go to state 16


State 15

    7 declarations: declarations VAR • identifier_list ':' type ';'

    ID  shift, and go to state 7

    identifier_list  go to state 17


State 16

    4 program: PROGRAM ID $@1 '(' identifier_list ')' ';' $@2 declarations subprogram_declarations • $@3 compound_statement '.'
   12 subprogram_declarations: subprogram_declarations • subprogram_declaration ';'

    FUNCTION   shift, and go to state 18
    PROCEDURE  shift, and go to state 19

    $default  reduce using rule 3 ($@3)

    $@3                     go to state 20
    subprogram_declaration  go to state 21
    subprogram_head         go to state 22


State 17

    6 identifier_list: identifier_list • ',' ID
    7 declarations: declarations VAR identifier_list • ':' type ';'

    ','  shift, and go to state 10
    ':'  shift, and go to state 23


State 18

   17 subprogram_head: FUNCTION • ID $@5 arguments ':' standerd_type ';'

    ID  shift, and go to state 24


State 19

   19 subprogram_head: PROCEDURE • ID $@6 arguments ';'

    ID  shift, and go to state 25


State 20

    4 program: PROGRAM ID $@1 '(' identifier_list ')' ';' $@2 declarations subprogram_declarations $@3 • compound_statement '.'

    BEG  shift, and go to state 26

    compound_statement  go to state 27


State 21

   12 subprogram_declarations: subprogram_declarations subprogram_declaration • ';'

    ';'  shift, and go to state 28


State 22

   15 subprogram_declaration: subprogram_head • $@4 declarations compound_statement

    $default  reduce using rule 14 ($@4)

    $@4  go to state 29


State 23

    7 declarations: declarations VAR identifier_list ':' • type ';'

    INT   shift, and go to state 30
    REAL  shift, and go to state 31

    type           go to state 32
    standerd_type  go to state 33


State 24

   17 subprogram_head: FUNCTION ID • $@5 arguments ':' standerd_type ';'

    $default  reduce using rule 16 ($@5)

    $@5  go to state 34


State 25

   19 subprogram_head: PROCEDURE ID • $@6 arguments ';'

    $default  reduce using rule 18 ($@6)

    $@6  go to state 35


State 26

   25 compound_statement: BEG • optional_statments END

    ID     shift, and go to state 36
    BEG    shift, and go to state 26
    WRITE  shift, and go to state 37
    READ   shift, and go to state 38
    IF     shift, and go to state 39

    WHILE     reduce using rule 37 (@10)
    $default  reduce using rule 27 (optional_statments)

    compound_statement   go to state 40
    optional_statments   go to state 41
    statement_list       go to state 42
    statement            go to state 43
    @10                  go to state 44
    variable             go to state 45
    procedure_statement  go to state 46


State 27

    4 program: PROGRAM ID $@1 '(' identifier_list ')' ';' $@2 declarations subprogram_declarations $@3 compound_statement • '.'

    '.'  shift, and go to state 47


State 28

   12 subprogram_declarations: subprogram_declarations subprogram_declaration ';' •

    $default  reduce using rule 12 (subprogram_declarations)


State 29

   15 subprogram_declaration: subprogram_head $@4 • declarations compound_statement

    $default  reduce using rule 8 (declarations)

    declarations  go to state 48


State 30

   10 standerd_type: INT •

    $default  reduce using rule 10 (standerd_type)


State 31

   11 standerd_type: REAL •

    $default  reduce using rule 11 (standerd_type)


State 32

    7 declarations: declarations VAR identifier_list ':' type • ';'

    ';'  shift, and go to state 49


State 33

    9 type: standerd_type •

    $default  reduce using rule 9 (type)


State 34

   17 subprogram_head: FUNCTION ID $@5 • arguments ':' standerd_type ';'

    '('  shift, and go to state 50

    $default  reduce using rule 21 (arguments)

    arguments  go to state 51


State 35

   19 subprogram_head: PROCEDURE ID $@6 • arguments ';'

    '('  shift, and go to state 50

    $default  reduce using rule 21 (arguments)

    arguments  go to state 52


State 36

   43 variable: ID •
   44 procedure_statement: ID •
   45                    | ID • '(' expression_list ')'

    '('  shift, and go to state 53

    ASSIGN    reduce using rule 43 (variable)
    $default  reduce using rule 44 (procedure_statement)


State 37

   42 statement: WRITE • '(' expression_list ')'

    '('  shift, and go to state 54


State 38

   41 statement: READ • '(' expression_list ')'

    '('  shift, and go to state 55


State 39

   36 statement: IF • expression @7 THEN @8 statement ELSE @9 statement

    ID     shift, and go to state 56
    NUM    shift, and go to state 57
    ADDOP  shift, and go to state 58
    NOT    shift, and go to state 59
    '('    shift, and go to state 60

    variable           go to state 61
    expression         go to state 62
    simple_expression  go to state 63
    term               go to state 64
    factor             go to state 65


State 40

   32 statement: compound_statement •

    $default  reduce using rule 32 (statement)


State 41

   25 compound_statement: BEG optional_statments • END

    END  shift, and go to state 66


State 42

   26 optional_statments: statement_list •
   29 statement_list: statement_list • ';' statement

    ';'  shift, and go to state 67

    $default  reduce using rule 26 (optional_statments)


State 43

   28 statement_list: statement •

    $default  reduce using rule 28 (statement_list)


State 44

   40 statement: @10 • WHILE @11 expression DO @12 statement

    WHILE  shift, and go to state 68


State 45

   30 statement: variable • ASSIGN expression

    ASSIGN  shift, and go to state 69


State 46

   31 statement: procedure_statement •

    $default  reduce using rule 31 (statement)


State 47

    4 program: PROGRAM ID $@1 '(' identifier_list ')' ';' $@2 declarations subprogram_declarations $@3 compound_statement '.' •

    $default  reduce using rule 4 (program)


State 48

    7 declarations: declarations • VAR identifier_list ':' type ';'
   15 subprogram_declaration: subprogram_head $@4 declarations • compound_statement

    VAR  shift, and go to state 15
    BEG  shift, and go to state 26

    compound_statement  go to state 70


State 49

    7 declarations: declarations VAR identifier_list ':' type ';' •

    $default  reduce using rule 7 (declarations)


State 50

   20 arguments: '(' • parametr_list ')'

    ID  shift, and go to state 7

    identifier_list  go to state 71
    parametr_list    go to state 72
    parametr         go to state 73


State 51

   17 subprogram_head: FUNCTION ID $@5 arguments • ':' standerd_type ';'

    ':'  shift, and go to state 74


State 52

   19 subprogram_head: PROCEDURE ID $@6 arguments • ';'

    ';'  shift, and go to state 75


State 53

   45 procedure_statement: ID '(' • expression_list ')'

    ID     shift, and go to state 56
    NUM    shift, and go to state 57
    ADDOP  shift, and go to state 58
    NOT    shift, and go to state 59
    '('    shift, and go to state 60

    variable           go to state 61
    expression_list    go to state 76
    expression         go to state 77
    simple_expression  go to state 63
    term               go to state 64
    factor             go to state 65


State 54

   42 statement: WRITE '(' • expression_list ')'

    ID     shift, and go to state 56
    NUM    shift, and go to state 57
    ADDOP  shift, and go to state 58
    NOT    shift, and go to state 59
    '('    shift, and go to state 60

    variable           go to state 61
    expression_list    go to state 78
    expression         go to state 77
    simple_expression  go to state 63
    term               go to state 64
    factor             go to state 65


State 55

   41 statement: READ '(' • expression_list ')'

    ID     shift, and go to state 56
    NUM    shift, and go to state 57
    ADDOP  shift, and go to state 58
    NOT    shift, and go to state 59
    '('    shift, and go to state 60

    variable           go to state 61
    expression_list    go to state 79
    expression         go to state 77
    simple_expression  go to state 63
    term               go to state 64
    factor             go to state 65


State 56

   43 variable: ID •
   58 factor: ID • '(' expression_list ')'

    '('  shift, and go to state 80

    $default  reduce using rule 43 (variable)


State 57

   59 factor: NUM •

    $default  reduce using rule 59 (factor)


State 58

   51 simple_expression: ADDOP • term

    ID   shift, and go to state 56
    NUM  shift, and go to state 57
    NOT  shift, and go to state 59
    '('  shift, and go to state 60

    variable  go to state 61
    term      go to state 81
    factor    go to state 65


State 59

   61 factor: NOT • factor

    ID   shift, and go to state 56
    NUM  shift, and go to state 57
    NOT  shift, and go to state 59
    '('  shift, and go to state 60

    variable  go to state 61
    factor    go to state 82


State 60

   60 factor: '(' • expression ')'

    ID     shift, and go to state 56
    NUM    shift, and go to state 57
    ADDOP  shift, and go to state 58
    NOT    shift, and go to state 59
    '('    shift, and go to state 60

    variable           go to state 61
    expression         go to state 83
    simple_expression  go to state 63
    term               go to state 64
    factor             go to state 65


State 61

   57 factor: variable •

    $default  reduce using rule 57 (factor)


State 62

   36 statement: IF expression • @7 THEN @8 statement ELSE @9 statement

    $default  reduce using rule 33 (@7)

    @7  go to state 84


State 63

   48 expression: simple_expression •
   49           | simple_expression • RELOP simple_expression
   52 simple_expression: simple_expression • ADDOP term
   53                  | simple_expression • AND_ term
   54                  | simple_expression • OR_ term

    ADDOP  shift, and go to state 85
    RELOP  shift, and go to state 86
    OR_    shift, and go to state 87
    AND_   shift, and go to state 88

    $default  reduce using rule 48 (expression)


State 64

   50 simple_expression: term •
   56 term: term • MULOP factor

    MULOP  shift, and go to state 89

    $default  reduce using rule 50 (simple_expression)


State 65

   55 term: factor •

    $default  reduce using rule 55 (term)


State 66

   25 compound_statement: BEG optional_statments END •

    $default  reduce using rule 25 (compound_statement)


State 67

   29 statement_list: statement_list ';' • statement

    ID     shift, and go to state 36
    BEG    shift, and go to state 26
    WRITE  shift, and go to state 37
    READ   shift, and go to state 38
    IF     shift, and go to state 39

    $default  reduce using rule 37 (@10)

    compound_statement   go to state 40
    statement            go to state 90
    @10                  go to state 44
    variable             go to state 45
    procedure_statement  go to state 46


State 68

   40 statement: @10 WHILE • @11 expression DO @12 statement

    $default  reduce using rule 38 (@11)

    @11  go to state 91


State 69

   30 statement: variable ASSIGN • expression

    ID     shift, and go to state 56
    NUM    shift, and go to state 57
    ADDOP  shift, and go to state 58
    NOT    shift, and go to state 59
    '('    shift, and go to state 60

    variable           go to state 61
    expression         go to state 92
    simple_expression  go to state 63
    term               go to state 64
    factor             go to state 65


State 70

   15 subprogram_declaration: subprogram_head $@4 declarations compound_statement •

    $default  reduce using rule 15 (subprogram_declaration)


State 71

    6 identifier_list: identifier_list • ',' ID
   24 parametr: identifier_list • ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 93


State 72

   20 arguments: '(' parametr_list • ')'
   23 parametr_list: parametr_list • ';' parametr

    ')'  shift, and go to state 94
    ';'  shift, and go to state 95


State 73

   22 parametr_list: parametr •

    $default  reduce using rule 22 (parametr_list)


State 74

   17 subprogram_head: FUNCTION ID $@5 arguments ':' • standerd_type ';'

    INT   shift, and go to state 30
    REAL  shift, and go to state 31

    standerd_type  go to state 96


State 75

   19 subprogram_head: PROCEDURE ID $@6 arguments ';' •

    $default  reduce using rule 19 (subprogram_head)


State 76

   45 procedure_statement: ID '(' expression_list • ')'
   47 expression_list: expression_list • ',' expression

    ')'  shift, and go to state 97
    ','  shift, and go to state 98


State 77

   46 expression_list: expression •

    $default  reduce using rule 46 (expression_list)


State 78

   42 statement: WRITE '(' expression_list • ')'
   47 expression_list: expression_list • ',' expression

    ')'  shift, and go to state 99
    ','  shift, and go to state 98


State 79

   41 statement: READ '(' expression_list • ')'
   47 expression_list: expression_list • ',' expression

    ')'  shift, and go to state 100
    ','  shift, and go to state 98


State 80

   58 factor: ID '(' • expression_list ')'

    ID     shift, and go to state 56
    NUM    shift, and go to state 57
    ADDOP  shift, and go to state 58
    NOT    shift, and go to state 59
    '('    shift, and go to state 60

    variable           go to state 61
    expression_list    go to state 101
    expression         go to state 77
    simple_expression  go to state 63
    term               go to state 64
    factor             go to state 65


State 81

   51 simple_expression: ADDOP term •
   56 term: term • MULOP factor

    MULOP  shift, and go to state 89

    $default  reduce using rule 51 (simple_expression)


State 82

   61 factor: NOT factor •

    $default  reduce using rule 61 (factor)


State 83

   60 factor: '(' expression • ')'

    ')'  shift, and go to state 102


State 84

   36 statement: IF expression @7 • THEN @8 statement ELSE @9 statement

    THEN  shift, and go to state 103


State 85

   52 simple_expression: simple_expression ADDOP • term

    ID   shift, and go to state 56
    NUM  shift, and go to state 57
    NOT  shift, and go to state 59
    '('  shift, and go to state 60

    variable  go to state 61
    term      go to state 104
    factor    go to state 65


State 86

   49 expression: simple_expression RELOP • simple_expression

    ID     shift, and go to state 56
    NUM    shift, and go to state 57
    ADDOP  shift, and go to state 58
    NOT    shift, and go to state 59
    '('    shift, and go to state 60

    variable           go to state 61
    simple_expression  go to state 105
    term               go to state 64
    factor             go to state 65


State 87

   54 simple_expression: simple_expression OR_ • term

    ID   shift, and go to state 56
    NUM  shift, and go to state 57
    NOT  shift, and go to state 59
    '('  shift, and go to state 60

    variable  go to state 61
    term      go to state 106
    factor    go to state 65


State 88

   53 simple_expression: simple_expression AND_ • term

    ID   shift, and go to state 56
    NUM  shift, and go to state 57
    NOT  shift, and go to state 59
    '('  shift, and go to state 60

    variable  go to state 61
    term      go to state 107
    factor    go to state 65


State 89

   56 term: term MULOP • factor

    ID   shift, and go to state 56
    NUM  shift, and go to state 57
    NOT  shift, and go to state 59
    '('  shift, and go to state 60

    variable  go to state 61
    factor    go to state 108


State 90

   29 statement_list: statement_list ';' statement •

    $default  reduce using rule 29 (statement_list)


State 91

   40 statement: @10 WHILE @11 • expression DO @12 statement

    ID     shift, and go to state 56
    NUM    shift, and go to state 57
    ADDOP  shift, and go to state 58
    NOT    shift, and go to state 59
    '('    shift, and go to state 60

    variable           go to state 61
    expression         go to state 109
    simple_expression  go to state 63
    term               go to state 64
    factor             go to state 65


State 92

   30 statement: variable ASSIGN expression •

    $default  reduce using rule 30 (statement)


State 93

   24 parametr: identifier_list ':' • type

    INT   shift, and go to state 30
    REAL  shift, and go to state 31

    type           go to state 110
    standerd_type  go to state 33


State 94

   20 arguments: '(' parametr_list ')' •

    $default  reduce using rule 20 (arguments)


State 95

   23 parametr_list: parametr_list ';' • parametr

    ID  shift, and go to state 7

    identifier_list  go to state 71
    parametr         go to state 111


State 96

   17 subprogram_head: FUNCTION ID $@5 arguments ':' standerd_type • ';'

    ';'  shift, and go to state 112


State 97

   45 procedure_statement: ID '(' expression_list ')' •

    $default  reduce using rule 45 (procedure_statement)


State 98

   47 expression_list: expression_list ',' • expression

    ID     shift, and go to state 56
    NUM    shift, and go to state 57
    ADDOP  shift, and go to state 58
    NOT    shift, and go to state 59
    '('    shift, and go to state 60

    variable           go to state 61
    expression         go to state 113
    simple_expression  go to state 63
    term               go to state 64
    factor             go to state 65


State 99

   42 statement: WRITE '(' expression_list ')' •

    $default  reduce using rule 42 (statement)


State 100

   41 statement: READ '(' expression_list ')' •

    $default  reduce using rule 41 (statement)


State 101

   47 expression_list: expression_list • ',' expression
   58 factor: ID '(' expression_list • ')'

    ')'  shift, and go to state 114
    ','  shift, and go to state 98


State 102

   60 factor: '(' expression ')' •

    $default  reduce using rule 60 (factor)


State 103

   36 statement: IF expression @7 THEN • @8 statement ELSE @9 statement

    $default  reduce using rule 34 (@8)

    @8  go to state 115


State 104

   52 simple_expression: simple_expression ADDOP term •
   56 term: term • MULOP factor

    MULOP  shift, and go to state 89

    $default  reduce using rule 52 (simple_expression)


State 105

   49 expression: simple_expression RELOP simple_expression •
   52 simple_expression: simple_expression • ADDOP term
   53                  | simple_expression • AND_ term
   54                  | simple_expression • OR_ term

    ADDOP  shift, and go to state 85
    OR_    shift, and go to state 87
    AND_   shift, and go to state 88

    $default  reduce using rule 49 (expression)


State 106

   54 simple_expression: simple_expression OR_ term •
   56 term: term • MULOP factor

    MULOP  shift, and go to state 89

    $default  reduce using rule 54 (simple_expression)


State 107

   53 simple_expression: simple_expression AND_ term •
   56 term: term • MULOP factor

    MULOP  shift, and go to state 89

    $default  reduce using rule 53 (simple_expression)


State 108

   56 term: term MULOP factor •

    $default  reduce using rule 56 (term)


State 109

   40 statement: @10 WHILE @11 expression • DO @12 statement

    DO  shift, and go to state 116


State 110

   24 parametr: identifier_list ':' type •

    $default  reduce using rule 24 (parametr)


State 111

   23 parametr_list: parametr_list ';' parametr •

    $default  reduce using rule 23 (parametr_list)


State 112

   17 subprogram_head: FUNCTION ID $@5 arguments ':' standerd_type ';' •

    $default  reduce using rule 17 (subprogram_head)


State 113

   47 expression_list: expression_list ',' expression •

    $default  reduce using rule 47 (expression_list)


State 114

   58 factor: ID '(' expression_list ')' •

    $default  reduce using rule 58 (factor)


State 115

   36 statement: IF expression @7 THEN @8 • statement ELSE @9 statement

    ID     shift, and go to state 36
    BEG    shift, and go to state 26
    WRITE  shift, and go to state 37
    READ   shift, and go to state 38
    IF     shift, and go to state 39

    $default  reduce using rule 37 (@10)

    compound_statement   go to state 40
    statement            go to state 117
    @10                  go to state 44
    variable             go to state 45
    procedure_statement  go to state 46


State 116

   40 statement: @10 WHILE @11 expression DO • @12 statement

    $default  reduce using rule 39 (@12)

    @12  go to state 118


State 117

   36 statement: IF expression @7 THEN @8 statement • ELSE @9 statement

    ELSE  shift, and go to state 119


State 118

   40 statement: @10 WHILE @11 expression DO @12 • statement

    ID     shift, and go to state 36
    BEG    shift, and go to state 26
    WRITE  shift, and go to state 37
    READ   shift, and go to state 38
    IF     shift, and go to state 39

    $default  reduce using rule 37 (@10)

    compound_statement   go to state 40
    statement            go to state 120
    @10                  go to state 44
    variable             go to state 45
    procedure_statement  go to state 46


State 119

   36 statement: IF expression @7 THEN @8 statement ELSE • @9 statement

    $default  reduce using rule 35 (@9)

    @9  go to state 121


State 120

   40 statement: @10 WHILE @11 expression DO @12 statement •

    $default  reduce using rule 40 (statement)


State 121

   36 statement: IF expression @7 THEN @8 statement ELSE @9 • statement

    ID     shift, and go to state 36
    BEG    shift, and go to state 26
    WRITE  shift, and go to state 37
    READ   shift, and go to state 38
    IF     shift, and go to state 39

    $default  reduce using rule 37 (@10)

    compound_statement   go to state 40
    statement            go to state 122
    @10                  go to state 44
    variable             go to state 45
    procedure_statement  go to state 46


State 122

   36 statement: IF expression @7 THEN @8 statement ELSE @9 statement •

    $default  reduce using rule 36 (statement)
