Terminals unused in grammar

    LABEL
    PROC
    NONE


Grammar

    0 $accept: program $end

    1 program: PROGRAM ID '(' identifier_list ')' ';' declarations compound_statement '.'

    2 identifier_list: ID
    3                | identifier_list ',' ID

    4 declarations: declarations VAR identifier_list ':' type ';'
    5             | ε

    6 type: standerd_type

    7 standerd_type: INT
    8              | REAL

    9 compound_statement: BEG optional_statments END

   10 optional_statments: statement_list
   11                   | ε

   12 statement_list: statement
   13               | statement_list ';' statement

   14 statement: variable ASSIGN expression
   15          | procedure_statement
   16          | compound_statement

   17 @1: ε

   18 @2: ε

   19 @3: ε

   20 statement: IF expression @1 THEN @2 statement ELSE @3 statement

   21 @4: ε

   22 @5: ε

   23 @6: ε

   24 statement: @4 WHILE @5 expression DO @6 statement
   25          | READ '(' identifier_list ')'
   26          | WRITE '(' identifier_list ')'

   27 variable: ID

   28 procedure_statement: ID

   29 expression: simple_expression
   30           | simple_expression RELOP simple_expression

   31 simple_expression: term
   32                  | ADDOP term
   33                  | simple_expression ADDOP term

   34 term: factor
   35     | term MULOP factor

   36 factor: variable
   37       | NUM
   38       | '(' expression ')'
   39       | NOT factor


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 1 25 26 38
    ')' (41) 1 25 26 38
    ',' (44) 3
    '.' (46) 1
    ':' (58) 4
    ';' (59) 1 4 13
    error (256)
    PROGRAM (258) 1
    ID (259) 1 2 3 27 28
    INT (260) 7
    REAL (261) 8
    VAR (262) 4
    NUM (263) 37
    LABEL (264)
    PROC (265)
    NONE (266)
    BEG (267) 9
    END (268) 9
    ASSIGN (269) 14
    ADDOP (270) 32 33
    MULOP (271) 35
    WRITE (272) 26
    READ (273) 25
    IF (274) 20
    THEN (275) 20
    ELSE (276) 20
    WHILE (277) 24
    DO (278) 24
    RELOP (279) 30
    NOT (280) 39


Nonterminals, with rules where they appear

    $accept (32)
        on left: 0
    program (33)
        on left: 1
        on right: 0
    identifier_list (34)
        on left: 2 3
        on right: 1 3 4 25 26
    declarations (35)
        on left: 4 5
        on right: 1 4
    type (36)
        on left: 6
        on right: 4
    standerd_type (37)
        on left: 7 8
        on right: 6
    compound_statement (38)
        on left: 9
        on right: 1 16
    optional_statments (39)
        on left: 10 11
        on right: 9
    statement_list (40)
        on left: 12 13
        on right: 10 13
    statement (41)
        on left: 14 15 16 20 24 25 26
        on right: 12 13 20 24
    @1 (42)
        on left: 17
        on right: 20
    @2 (43)
        on left: 18
        on right: 20
    @3 (44)
        on left: 19
        on right: 20
    @4 (45)
        on left: 21
        on right: 24
    @5 (46)
        on left: 22
        on right: 24
    @6 (47)
        on left: 23
        on right: 24
    variable (48)
        on left: 27
        on right: 14 36
    procedure_statement (49)
        on left: 28
        on right: 15
    expression (50)
        on left: 29 30
        on right: 14 20 24 38
    simple_expression (51)
        on left: 31 32 33
        on right: 29 30 33
    term (52)
        on left: 34 35
        on right: 31 32 33 35
    factor (53)
        on left: 36 37 38 39
        on right: 34 35 39


State 0

    0 $accept: • program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    1 program: PROGRAM • ID '(' identifier_list ')' ';' declarations compound_statement '.'

    ID  shift, and go to state 3


State 2

    0 $accept: program • $end

    $end  shift, and go to state 4


State 3

    1 program: PROGRAM ID • '(' identifier_list ')' ';' declarations compound_statement '.'

    '('  shift, and go to state 5


State 4

    0 $accept: program $end •

    $default  accept


State 5

    1 program: PROGRAM ID '(' • identifier_list ')' ';' declarations compound_statement '.'

    ID  shift, and go to state 6

    identifier_list  go to state 7


State 6

    2 identifier_list: ID •

    $default  reduce using rule 2 (identifier_list)


State 7

    1 program: PROGRAM ID '(' identifier_list • ')' ';' declarations compound_statement '.'
    3 identifier_list: identifier_list • ',' ID

    ')'  shift, and go to state 8
    ','  shift, and go to state 9


State 8

    1 program: PROGRAM ID '(' identifier_list ')' • ';' declarations compound_statement '.'

    ';'  shift, and go to state 10


State 9

    3 identifier_list: identifier_list ',' • ID

    ID  shift, and go to state 11


State 10

    1 program: PROGRAM ID '(' identifier_list ')' ';' • declarations compound_statement '.'

    $default  reduce using rule 5 (declarations)

    declarations  go to state 12


State 11

    3 identifier_list: identifier_list ',' ID •

    $default  reduce using rule 3 (identifier_list)


State 12

    1 program: PROGRAM ID '(' identifier_list ')' ';' declarations • compound_statement '.'
    4 declarations: declarations • VAR identifier_list ':' type ';'

    VAR  shift, and go to state 13
    BEG  shift, and go to state 14

    compound_statement  go to state 15


State 13

    4 declarations: declarations VAR • identifier_list ':' type ';'

    ID  shift, and go to state 6

    identifier_list  go to state 16


State 14

    9 compound_statement: BEG • optional_statments END

    ID     shift, and go to state 17
    BEG    shift, and go to state 14
    WRITE  shift, and go to state 18
    READ   shift, and go to state 19
    IF     shift, and go to state 20

    WHILE     reduce using rule 21 (@4)
    $default  reduce using rule 11 (optional_statments)

    compound_statement   go to state 21
    optional_statments   go to state 22
    statement_list       go to state 23
    statement            go to state 24
    @4                   go to state 25
    variable             go to state 26
    procedure_statement  go to state 27


State 15

    1 program: PROGRAM ID '(' identifier_list ')' ';' declarations compound_statement • '.'

    '.'  shift, and go to state 28


State 16

    3 identifier_list: identifier_list • ',' ID
    4 declarations: declarations VAR identifier_list • ':' type ';'

    ','  shift, and go to state 9
    ':'  shift, and go to state 29


State 17

   27 variable: ID •
   28 procedure_statement: ID •

    ASSIGN    reduce using rule 27 (variable)
    $default  reduce using rule 28 (procedure_statement)


State 18

   26 statement: WRITE • '(' identifier_list ')'

    '('  shift, and go to state 30


State 19

   25 statement: READ • '(' identifier_list ')'

    '('  shift, and go to state 31


State 20

   20 statement: IF • expression @1 THEN @2 statement ELSE @3 statement

    ID     shift, and go to state 32
    NUM    shift, and go to state 33
    ADDOP  shift, and go to state 34
    NOT    shift, and go to state 35
    '('    shift, and go to state 36

    variable           go to state 37
    expression         go to state 38
    simple_expression  go to state 39
    term               go to state 40
    factor             go to state 41


State 21

   16 statement: compound_statement •

    $default  reduce using rule 16 (statement)


State 22

    9 compound_statement: BEG optional_statments • END

    END  shift, and go to state 42


State 23

   10 optional_statments: statement_list •
   13 statement_list: statement_list • ';' statement

    ';'  shift, and go to state 43

    $default  reduce using rule 10 (optional_statments)


State 24

   12 statement_list: statement •

    $default  reduce using rule 12 (statement_list)


State 25

   24 statement: @4 • WHILE @5 expression DO @6 statement

    WHILE  shift, and go to state 44


State 26

   14 statement: variable • ASSIGN expression

    ASSIGN  shift, and go to state 45


State 27

   15 statement: procedure_statement •

    $default  reduce using rule 15 (statement)


State 28

    1 program: PROGRAM ID '(' identifier_list ')' ';' declarations compound_statement '.' •

    $default  reduce using rule 1 (program)


State 29

    4 declarations: declarations VAR identifier_list ':' • type ';'

    INT   shift, and go to state 46
    REAL  shift, and go to state 47

    type           go to state 48
    standerd_type  go to state 49


State 30

   26 statement: WRITE '(' • identifier_list ')'

    ID  shift, and go to state 6

    identifier_list  go to state 50


State 31

   25 statement: READ '(' • identifier_list ')'

    ID  shift, and go to state 6

    identifier_list  go to state 51


State 32

   27 variable: ID •

    $default  reduce using rule 27 (variable)


State 33

   37 factor: NUM •

    $default  reduce using rule 37 (factor)


State 34

   32 simple_expression: ADDOP • term

    ID   shift, and go to state 32
    NUM  shift, and go to state 33
    NOT  shift, and go to state 35
    '('  shift, and go to state 36

    variable  go to state 37
    term      go to state 52
    factor    go to state 41


State 35

   39 factor: NOT • factor

    ID   shift, and go to state 32
    NUM  shift, and go to state 33
    NOT  shift, and go to state 35
    '('  shift, and go to state 36

    variable  go to state 37
    factor    go to state 53


State 36

   38 factor: '(' • expression ')'

    ID     shift, and go to state 32
    NUM    shift, and go to state 33
    ADDOP  shift, and go to state 34
    NOT    shift, and go to state 35
    '('    shift, and go to state 36

    variable           go to state 37
    expression         go to state 54
    simple_expression  go to state 39
    term               go to state 40
    factor             go to state 41


State 37

   36 factor: variable •

    $default  reduce using rule 36 (factor)


State 38

   20 statement: IF expression • @1 THEN @2 statement ELSE @3 statement

    $default  reduce using rule 17 (@1)

    @1  go to state 55


State 39

   29 expression: simple_expression •
   30           | simple_expression • RELOP simple_expression
   33 simple_expression: simple_expression • ADDOP term

    ADDOP  shift, and go to state 56
    RELOP  shift, and go to state 57

    $default  reduce using rule 29 (expression)


State 40

   31 simple_expression: term •
   35 term: term • MULOP factor

    MULOP  shift, and go to state 58

    $default  reduce using rule 31 (simple_expression)


State 41

   34 term: factor •

    $default  reduce using rule 34 (term)


State 42

    9 compound_statement: BEG optional_statments END •

    $default  reduce using rule 9 (compound_statement)


State 43

   13 statement_list: statement_list ';' • statement

    ID     shift, and go to state 17
    BEG    shift, and go to state 14
    WRITE  shift, and go to state 18
    READ   shift, and go to state 19
    IF     shift, and go to state 20

    $default  reduce using rule 21 (@4)

    compound_statement   go to state 21
    statement            go to state 59
    @4                   go to state 25
    variable             go to state 26
    procedure_statement  go to state 27


State 44

   24 statement: @4 WHILE • @5 expression DO @6 statement

    $default  reduce using rule 22 (@5)

    @5  go to state 60


State 45

   14 statement: variable ASSIGN • expression

    ID     shift, and go to state 32
    NUM    shift, and go to state 33
    ADDOP  shift, and go to state 34
    NOT    shift, and go to state 35
    '('    shift, and go to state 36

    variable           go to state 37
    expression         go to state 61
    simple_expression  go to state 39
    term               go to state 40
    factor             go to state 41


State 46

    7 standerd_type: INT •

    $default  reduce using rule 7 (standerd_type)


State 47

    8 standerd_type: REAL •

    $default  reduce using rule 8 (standerd_type)


State 48

    4 declarations: declarations VAR identifier_list ':' type • ';'

    ';'  shift, and go to state 62


State 49

    6 type: standerd_type •

    $default  reduce using rule 6 (type)


State 50

    3 identifier_list: identifier_list • ',' ID
   26 statement: WRITE '(' identifier_list • ')'

    ')'  shift, and go to state 63
    ','  shift, and go to state 9


State 51

    3 identifier_list: identifier_list • ',' ID
   25 statement: READ '(' identifier_list • ')'

    ')'  shift, and go to state 64
    ','  shift, and go to state 9


State 52

   32 simple_expression: ADDOP term •
   35 term: term • MULOP factor

    MULOP  shift, and go to state 58

    $default  reduce using rule 32 (simple_expression)


State 53

   39 factor: NOT factor •

    $default  reduce using rule 39 (factor)


State 54

   38 factor: '(' expression • ')'

    ')'  shift, and go to state 65


State 55

   20 statement: IF expression @1 • THEN @2 statement ELSE @3 statement

    THEN  shift, and go to state 66


State 56

   33 simple_expression: simple_expression ADDOP • term

    ID   shift, and go to state 32
    NUM  shift, and go to state 33
    NOT  shift, and go to state 35
    '('  shift, and go to state 36

    variable  go to state 37
    term      go to state 67
    factor    go to state 41


State 57

   30 expression: simple_expression RELOP • simple_expression

    ID     shift, and go to state 32
    NUM    shift, and go to state 33
    ADDOP  shift, and go to state 34
    NOT    shift, and go to state 35
    '('    shift, and go to state 36

    variable           go to state 37
    simple_expression  go to state 68
    term               go to state 40
    factor             go to state 41


State 58

   35 term: term MULOP • factor

    ID   shift, and go to state 32
    NUM  shift, and go to state 33
    NOT  shift, and go to state 35
    '('  shift, and go to state 36

    variable  go to state 37
    factor    go to state 69


State 59

   13 statement_list: statement_list ';' statement •

    $default  reduce using rule 13 (statement_list)


State 60

   24 statement: @4 WHILE @5 • expression DO @6 statement

    ID     shift, and go to state 32
    NUM    shift, and go to state 33
    ADDOP  shift, and go to state 34
    NOT    shift, and go to state 35
    '('    shift, and go to state 36

    variable           go to state 37
    expression         go to state 70
    simple_expression  go to state 39
    term               go to state 40
    factor             go to state 41


State 61

   14 statement: variable ASSIGN expression •

    $default  reduce using rule 14 (statement)


State 62

    4 declarations: declarations VAR identifier_list ':' type ';' •

    $default  reduce using rule 4 (declarations)


State 63

   26 statement: WRITE '(' identifier_list ')' •

    $default  reduce using rule 26 (statement)


State 64

   25 statement: READ '(' identifier_list ')' •

    $default  reduce using rule 25 (statement)


State 65

   38 factor: '(' expression ')' •

    $default  reduce using rule 38 (factor)


State 66

   20 statement: IF expression @1 THEN • @2 statement ELSE @3 statement

    $default  reduce using rule 18 (@2)

    @2  go to state 71


State 67

   33 simple_expression: simple_expression ADDOP term •
   35 term: term • MULOP factor

    MULOP  shift, and go to state 58

    $default  reduce using rule 33 (simple_expression)


State 68

   30 expression: simple_expression RELOP simple_expression •
   33 simple_expression: simple_expression • ADDOP term

    ADDOP  shift, and go to state 56

    $default  reduce using rule 30 (expression)


State 69

   35 term: term MULOP factor •

    $default  reduce using rule 35 (term)


State 70

   24 statement: @4 WHILE @5 expression • DO @6 statement

    DO  shift, and go to state 72


State 71

   20 statement: IF expression @1 THEN @2 • statement ELSE @3 statement

    ID     shift, and go to state 17
    BEG    shift, and go to state 14
    WRITE  shift, and go to state 18
    READ   shift, and go to state 19
    IF     shift, and go to state 20

    $default  reduce using rule 21 (@4)

    compound_statement   go to state 21
    statement            go to state 73
    @4                   go to state 25
    variable             go to state 26
    procedure_statement  go to state 27


State 72

   24 statement: @4 WHILE @5 expression DO • @6 statement

    $default  reduce using rule 23 (@6)

    @6  go to state 74


State 73

   20 statement: IF expression @1 THEN @2 statement • ELSE @3 statement

    ELSE  shift, and go to state 75


State 74

   24 statement: @4 WHILE @5 expression DO @6 • statement

    ID     shift, and go to state 17
    BEG    shift, and go to state 14
    WRITE  shift, and go to state 18
    READ   shift, and go to state 19
    IF     shift, and go to state 20

    $default  reduce using rule 21 (@4)

    compound_statement   go to state 21
    statement            go to state 76
    @4                   go to state 25
    variable             go to state 26
    procedure_statement  go to state 27


State 75

   20 statement: IF expression @1 THEN @2 statement ELSE • @3 statement

    $default  reduce using rule 19 (@3)

    @3  go to state 77


State 76

   24 statement: @4 WHILE @5 expression DO @6 statement •

    $default  reduce using rule 24 (statement)


State 77

   20 statement: IF expression @1 THEN @2 statement ELSE @3 • statement

    ID     shift, and go to state 17
    BEG    shift, and go to state 14
    WRITE  shift, and go to state 18
    READ   shift, and go to state 19
    IF     shift, and go to state 20

    $default  reduce using rule 21 (@4)

    compound_statement   go to state 21
    statement            go to state 78
    @4                   go to state 25
    variable             go to state 26
    procedure_statement  go to state 27


State 78

   20 statement: IF expression @1 THEN @2 statement ELSE @3 statement •

    $default  reduce using rule 20 (statement)
