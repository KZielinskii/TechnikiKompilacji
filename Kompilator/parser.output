Terminals unused in grammar

    LABEL
    PROC
    NONE


Grammar

    0 $accept: program $end

    1 $@1: ε

    2 program: PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations $@1 compound_statement '.'

    3 identifier_list: ID
    4                | identifier_list ',' ID

    5 declarations: declarations VAR identifier_list ':' type ';'
    6             | ε

    7 type: standerd_type

    8 standerd_type: INT
    9              | REAL

   10 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   11                        | ε

   12 $@2: ε

   13 subprogram_declaration: subprogram_head $@2 declarations compound_statement

   14 $@3: ε

   15 subprogram_head: FUNCTION ID $@3 arguments ':' standerd_type ';'

   16 $@4: ε

   17 subprogram_head: PROCEDURE ID $@4 arguments ';'

   18 arguments: '(' parametr_list ')'
   19          | ε

   20 parametr_list: parametr
   21              | parametr_list ';' parametr

   22 parametr: identifier_list ':' type

   23 compound_statement: BEG optional_statments END

   24 optional_statments: statement_list
   25                   | ε

   26 statement_list: statement
   27               | statement_list ';' statement

   28 statement: variable ASSIGN expression
   29          | procedure_statement
   30          | compound_statement

   31 @5: ε

   32 @6: ε

   33 @7: ε

   34 statement: IF expression @5 THEN @6 statement ELSE @7 statement

   35 @8: ε

   36 @9: ε

   37 @10: ε

   38 statement: @8 WHILE @9 expression DO @10 statement
   39          | READ '(' expression_list ')'
   40          | WRITE '(' expression_list ')'

   41 variable: ID

   42 procedure_statement: ID
   43                    | ID '(' expression_list ')'

   44 expression_list: expression
   45                | expression_list ',' expression

   46 expression: simple_expression
   47           | simple_expression RELOP simple_expression

   48 simple_expression: term
   49                  | ADDOP term
   50                  | simple_expression ADDOP term

   51 term: factor
   52     | term MULOP factor

   53 factor: variable
   54       | ID '(' expression_list ')'
   55       | NUM
   56       | '(' expression ')'
   57       | NOT factor


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 2 18 39 40 43 54 56
    ')' (41) 2 18 39 40 43 54 56
    ',' (44) 4 45
    '.' (46) 2
    ':' (58) 5 15 22
    ';' (59) 2 5 10 15 17 21 27
    error (256)
    PROGRAM (258) 2
    ID (259) 2 3 4 15 17 41 42 43 54
    INT (260) 8
    REAL (261) 9
    VAR (262) 5
    NUM (263) 55
    LABEL (264)
    PROC (265)
    NONE (266)
    BEG (267) 23
    END (268) 23
    ASSIGN (269) 28
    ADDOP (270) 49 50
    MULOP (271) 52
    WRITE (272) 40
    READ (273) 39
    IF (274) 34
    THEN (275) 34
    ELSE (276) 34
    WHILE (277) 38
    DO (278) 38
    RELOP (279) 47
    NOT (280) 57
    FUNCTION (281) 15
    PROCEDURE (282) 17


Nonterminals, with rules where they appear

    $accept (34)
        on left: 0
    program (35)
        on left: 2
        on right: 0
    $@1 (36)
        on left: 1
        on right: 2
    identifier_list (37)
        on left: 3 4
        on right: 2 4 5 22
    declarations (38)
        on left: 5 6
        on right: 2 5 13
    type (39)
        on left: 7
        on right: 5 22
    standerd_type (40)
        on left: 8 9
        on right: 7 15
    subprogram_declarations (41)
        on left: 10 11
        on right: 2 10
    subprogram_declaration (42)
        on left: 13
        on right: 10
    $@2 (43)
        on left: 12
        on right: 13
    subprogram_head (44)
        on left: 15 17
        on right: 13
    $@3 (45)
        on left: 14
        on right: 15
    $@4 (46)
        on left: 16
        on right: 17
    arguments (47)
        on left: 18 19
        on right: 15 17
    parametr_list (48)
        on left: 20 21
        on right: 18 21
    parametr (49)
        on left: 22
        on right: 20 21
    compound_statement (50)
        on left: 23
        on right: 2 13 30
    optional_statments (51)
        on left: 24 25
        on right: 23
    statement_list (52)
        on left: 26 27
        on right: 24 27
    statement (53)
        on left: 28 29 30 34 38 39 40
        on right: 26 27 34 38
    @5 (54)
        on left: 31
        on right: 34
    @6 (55)
        on left: 32
        on right: 34
    @7 (56)
        on left: 33
        on right: 34
    @8 (57)
        on left: 35
        on right: 38
    @9 (58)
        on left: 36
        on right: 38
    @10 (59)
        on left: 37
        on right: 38
    variable (60)
        on left: 41
        on right: 28 53
    procedure_statement (61)
        on left: 42 43
        on right: 29
    expression_list (62)
        on left: 44 45
        on right: 39 40 43 45 54
    expression (63)
        on left: 46 47
        on right: 28 34 38 44 45 56
    simple_expression (64)
        on left: 48 49 50
        on right: 46 47 50
    term (65)
        on left: 51 52
        on right: 48 49 50 52
    factor (66)
        on left: 53 54 55 56 57
        on right: 51 52 57


State 0

    0 $accept: • program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    2 program: PROGRAM • ID '(' identifier_list ')' ';' declarations subprogram_declarations $@1 compound_statement '.'

    ID  shift, and go to state 3


State 2

    0 $accept: program • $end

    $end  shift, and go to state 4


State 3

    2 program: PROGRAM ID • '(' identifier_list ')' ';' declarations subprogram_declarations $@1 compound_statement '.'

    '('  shift, and go to state 5


State 4

    0 $accept: program $end •

    $default  accept


State 5

    2 program: PROGRAM ID '(' • identifier_list ')' ';' declarations subprogram_declarations $@1 compound_statement '.'

    ID  shift, and go to state 6

    identifier_list  go to state 7


State 6

    3 identifier_list: ID •

    $default  reduce using rule 3 (identifier_list)


State 7

    2 program: PROGRAM ID '(' identifier_list • ')' ';' declarations subprogram_declarations $@1 compound_statement '.'
    4 identifier_list: identifier_list • ',' ID

    ')'  shift, and go to state 8
    ','  shift, and go to state 9


State 8

    2 program: PROGRAM ID '(' identifier_list ')' • ';' declarations subprogram_declarations $@1 compound_statement '.'

    ';'  shift, and go to state 10


State 9

    4 identifier_list: identifier_list ',' • ID

    ID  shift, and go to state 11


State 10

    2 program: PROGRAM ID '(' identifier_list ')' ';' • declarations subprogram_declarations $@1 compound_statement '.'

    $default  reduce using rule 6 (declarations)

    declarations  go to state 12


State 11

    4 identifier_list: identifier_list ',' ID •

    $default  reduce using rule 4 (identifier_list)


State 12

    2 program: PROGRAM ID '(' identifier_list ')' ';' declarations • subprogram_declarations $@1 compound_statement '.'
    5 declarations: declarations • VAR identifier_list ':' type ';'

    VAR  shift, and go to state 13

    $default  reduce using rule 11 (subprogram_declarations)

    subprogram_declarations  go to state 14


State 13

    5 declarations: declarations VAR • identifier_list ':' type ';'

    ID  shift, and go to state 6

    identifier_list  go to state 15


State 14

    2 program: PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations • $@1 compound_statement '.'
   10 subprogram_declarations: subprogram_declarations • subprogram_declaration ';'

    FUNCTION   shift, and go to state 16
    PROCEDURE  shift, and go to state 17

    $default  reduce using rule 1 ($@1)

    $@1                     go to state 18
    subprogram_declaration  go to state 19
    subprogram_head         go to state 20


State 15

    4 identifier_list: identifier_list • ',' ID
    5 declarations: declarations VAR identifier_list • ':' type ';'

    ','  shift, and go to state 9
    ':'  shift, and go to state 21


State 16

   15 subprogram_head: FUNCTION • ID $@3 arguments ':' standerd_type ';'

    ID  shift, and go to state 22


State 17

   17 subprogram_head: PROCEDURE • ID $@4 arguments ';'

    ID  shift, and go to state 23


State 18

    2 program: PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations $@1 • compound_statement '.'

    BEG  shift, and go to state 24

    compound_statement  go to state 25


State 19

   10 subprogram_declarations: subprogram_declarations subprogram_declaration • ';'

    ';'  shift, and go to state 26


State 20

   13 subprogram_declaration: subprogram_head • $@2 declarations compound_statement

    $default  reduce using rule 12 ($@2)

    $@2  go to state 27


State 21

    5 declarations: declarations VAR identifier_list ':' • type ';'

    INT   shift, and go to state 28
    REAL  shift, and go to state 29

    type           go to state 30
    standerd_type  go to state 31


State 22

   15 subprogram_head: FUNCTION ID • $@3 arguments ':' standerd_type ';'

    $default  reduce using rule 14 ($@3)

    $@3  go to state 32


State 23

   17 subprogram_head: PROCEDURE ID • $@4 arguments ';'

    $default  reduce using rule 16 ($@4)

    $@4  go to state 33


State 24

   23 compound_statement: BEG • optional_statments END

    ID     shift, and go to state 34
    BEG    shift, and go to state 24
    WRITE  shift, and go to state 35
    READ   shift, and go to state 36
    IF     shift, and go to state 37

    WHILE     reduce using rule 35 (@8)
    $default  reduce using rule 25 (optional_statments)

    compound_statement   go to state 38
    optional_statments   go to state 39
    statement_list       go to state 40
    statement            go to state 41
    @8                   go to state 42
    variable             go to state 43
    procedure_statement  go to state 44


State 25

    2 program: PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations $@1 compound_statement • '.'

    '.'  shift, and go to state 45


State 26

   10 subprogram_declarations: subprogram_declarations subprogram_declaration ';' •

    $default  reduce using rule 10 (subprogram_declarations)


State 27

   13 subprogram_declaration: subprogram_head $@2 • declarations compound_statement

    $default  reduce using rule 6 (declarations)

    declarations  go to state 46


State 28

    8 standerd_type: INT •

    $default  reduce using rule 8 (standerd_type)


State 29

    9 standerd_type: REAL •

    $default  reduce using rule 9 (standerd_type)


State 30

    5 declarations: declarations VAR identifier_list ':' type • ';'

    ';'  shift, and go to state 47


State 31

    7 type: standerd_type •

    $default  reduce using rule 7 (type)


State 32

   15 subprogram_head: FUNCTION ID $@3 • arguments ':' standerd_type ';'

    '('  shift, and go to state 48

    $default  reduce using rule 19 (arguments)

    arguments  go to state 49


State 33

   17 subprogram_head: PROCEDURE ID $@4 • arguments ';'

    '('  shift, and go to state 48

    $default  reduce using rule 19 (arguments)

    arguments  go to state 50


State 34

   41 variable: ID •
   42 procedure_statement: ID •
   43                    | ID • '(' expression_list ')'

    '('  shift, and go to state 51

    ASSIGN    reduce using rule 41 (variable)
    $default  reduce using rule 42 (procedure_statement)


State 35

   40 statement: WRITE • '(' expression_list ')'

    '('  shift, and go to state 52


State 36

   39 statement: READ • '(' expression_list ')'

    '('  shift, and go to state 53


State 37

   34 statement: IF • expression @5 THEN @6 statement ELSE @7 statement

    ID     shift, and go to state 54
    NUM    shift, and go to state 55
    ADDOP  shift, and go to state 56
    NOT    shift, and go to state 57
    '('    shift, and go to state 58

    variable           go to state 59
    expression         go to state 60
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


State 38

   30 statement: compound_statement •

    $default  reduce using rule 30 (statement)


State 39

   23 compound_statement: BEG optional_statments • END

    END  shift, and go to state 64


State 40

   24 optional_statments: statement_list •
   27 statement_list: statement_list • ';' statement

    ';'  shift, and go to state 65

    $default  reduce using rule 24 (optional_statments)


State 41

   26 statement_list: statement •

    $default  reduce using rule 26 (statement_list)


State 42

   38 statement: @8 • WHILE @9 expression DO @10 statement

    WHILE  shift, and go to state 66


State 43

   28 statement: variable • ASSIGN expression

    ASSIGN  shift, and go to state 67


State 44

   29 statement: procedure_statement •

    $default  reduce using rule 29 (statement)


State 45

    2 program: PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations $@1 compound_statement '.' •

    $default  reduce using rule 2 (program)


State 46

    5 declarations: declarations • VAR identifier_list ':' type ';'
   13 subprogram_declaration: subprogram_head $@2 declarations • compound_statement

    VAR  shift, and go to state 13
    BEG  shift, and go to state 24

    compound_statement  go to state 68


State 47

    5 declarations: declarations VAR identifier_list ':' type ';' •

    $default  reduce using rule 5 (declarations)


State 48

   18 arguments: '(' • parametr_list ')'

    ID  shift, and go to state 6

    identifier_list  go to state 69
    parametr_list    go to state 70
    parametr         go to state 71


State 49

   15 subprogram_head: FUNCTION ID $@3 arguments • ':' standerd_type ';'

    ':'  shift, and go to state 72


State 50

   17 subprogram_head: PROCEDURE ID $@4 arguments • ';'

    ';'  shift, and go to state 73


State 51

   43 procedure_statement: ID '(' • expression_list ')'

    ID     shift, and go to state 54
    NUM    shift, and go to state 55
    ADDOP  shift, and go to state 56
    NOT    shift, and go to state 57
    '('    shift, and go to state 58

    variable           go to state 59
    expression_list    go to state 74
    expression         go to state 75
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


State 52

   40 statement: WRITE '(' • expression_list ')'

    ID     shift, and go to state 54
    NUM    shift, and go to state 55
    ADDOP  shift, and go to state 56
    NOT    shift, and go to state 57
    '('    shift, and go to state 58

    variable           go to state 59
    expression_list    go to state 76
    expression         go to state 75
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


State 53

   39 statement: READ '(' • expression_list ')'

    ID     shift, and go to state 54
    NUM    shift, and go to state 55
    ADDOP  shift, and go to state 56
    NOT    shift, and go to state 57
    '('    shift, and go to state 58

    variable           go to state 59
    expression_list    go to state 77
    expression         go to state 75
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


State 54

   41 variable: ID •
   54 factor: ID • '(' expression_list ')'

    '('  shift, and go to state 78

    $default  reduce using rule 41 (variable)


State 55

   55 factor: NUM •

    $default  reduce using rule 55 (factor)


State 56

   49 simple_expression: ADDOP • term

    ID   shift, and go to state 54
    NUM  shift, and go to state 55
    NOT  shift, and go to state 57
    '('  shift, and go to state 58

    variable  go to state 59
    term      go to state 79
    factor    go to state 63


State 57

   57 factor: NOT • factor

    ID   shift, and go to state 54
    NUM  shift, and go to state 55
    NOT  shift, and go to state 57
    '('  shift, and go to state 58

    variable  go to state 59
    factor    go to state 80


State 58

   56 factor: '(' • expression ')'

    ID     shift, and go to state 54
    NUM    shift, and go to state 55
    ADDOP  shift, and go to state 56
    NOT    shift, and go to state 57
    '('    shift, and go to state 58

    variable           go to state 59
    expression         go to state 81
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


State 59

   53 factor: variable •

    $default  reduce using rule 53 (factor)


State 60

   34 statement: IF expression • @5 THEN @6 statement ELSE @7 statement

    $default  reduce using rule 31 (@5)

    @5  go to state 82


State 61

   46 expression: simple_expression •
   47           | simple_expression • RELOP simple_expression
   50 simple_expression: simple_expression • ADDOP term

    ADDOP  shift, and go to state 83
    RELOP  shift, and go to state 84

    $default  reduce using rule 46 (expression)


State 62

   48 simple_expression: term •
   52 term: term • MULOP factor

    MULOP  shift, and go to state 85

    $default  reduce using rule 48 (simple_expression)


State 63

   51 term: factor •

    $default  reduce using rule 51 (term)


State 64

   23 compound_statement: BEG optional_statments END •

    $default  reduce using rule 23 (compound_statement)


State 65

   27 statement_list: statement_list ';' • statement

    ID     shift, and go to state 34
    BEG    shift, and go to state 24
    WRITE  shift, and go to state 35
    READ   shift, and go to state 36
    IF     shift, and go to state 37

    $default  reduce using rule 35 (@8)

    compound_statement   go to state 38
    statement            go to state 86
    @8                   go to state 42
    variable             go to state 43
    procedure_statement  go to state 44


State 66

   38 statement: @8 WHILE • @9 expression DO @10 statement

    $default  reduce using rule 36 (@9)

    @9  go to state 87


State 67

   28 statement: variable ASSIGN • expression

    ID     shift, and go to state 54
    NUM    shift, and go to state 55
    ADDOP  shift, and go to state 56
    NOT    shift, and go to state 57
    '('    shift, and go to state 58

    variable           go to state 59
    expression         go to state 88
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


State 68

   13 subprogram_declaration: subprogram_head $@2 declarations compound_statement •

    $default  reduce using rule 13 (subprogram_declaration)


State 69

    4 identifier_list: identifier_list • ',' ID
   22 parametr: identifier_list • ':' type

    ','  shift, and go to state 9
    ':'  shift, and go to state 89


State 70

   18 arguments: '(' parametr_list • ')'
   21 parametr_list: parametr_list • ';' parametr

    ')'  shift, and go to state 90
    ';'  shift, and go to state 91


State 71

   20 parametr_list: parametr •

    $default  reduce using rule 20 (parametr_list)


State 72

   15 subprogram_head: FUNCTION ID $@3 arguments ':' • standerd_type ';'

    INT   shift, and go to state 28
    REAL  shift, and go to state 29

    standerd_type  go to state 92


State 73

   17 subprogram_head: PROCEDURE ID $@4 arguments ';' •

    $default  reduce using rule 17 (subprogram_head)


State 74

   43 procedure_statement: ID '(' expression_list • ')'
   45 expression_list: expression_list • ',' expression

    ')'  shift, and go to state 93
    ','  shift, and go to state 94


State 75

   44 expression_list: expression •

    $default  reduce using rule 44 (expression_list)


State 76

   40 statement: WRITE '(' expression_list • ')'
   45 expression_list: expression_list • ',' expression

    ')'  shift, and go to state 95
    ','  shift, and go to state 94


State 77

   39 statement: READ '(' expression_list • ')'
   45 expression_list: expression_list • ',' expression

    ')'  shift, and go to state 96
    ','  shift, and go to state 94


State 78

   54 factor: ID '(' • expression_list ')'

    ID     shift, and go to state 54
    NUM    shift, and go to state 55
    ADDOP  shift, and go to state 56
    NOT    shift, and go to state 57
    '('    shift, and go to state 58

    variable           go to state 59
    expression_list    go to state 97
    expression         go to state 75
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


State 79

   49 simple_expression: ADDOP term •
   52 term: term • MULOP factor

    MULOP  shift, and go to state 85

    $default  reduce using rule 49 (simple_expression)


State 80

   57 factor: NOT factor •

    $default  reduce using rule 57 (factor)


State 81

   56 factor: '(' expression • ')'

    ')'  shift, and go to state 98


State 82

   34 statement: IF expression @5 • THEN @6 statement ELSE @7 statement

    THEN  shift, and go to state 99


State 83

   50 simple_expression: simple_expression ADDOP • term

    ID   shift, and go to state 54
    NUM  shift, and go to state 55
    NOT  shift, and go to state 57
    '('  shift, and go to state 58

    variable  go to state 59
    term      go to state 100
    factor    go to state 63


State 84

   47 expression: simple_expression RELOP • simple_expression

    ID     shift, and go to state 54
    NUM    shift, and go to state 55
    ADDOP  shift, and go to state 56
    NOT    shift, and go to state 57
    '('    shift, and go to state 58

    variable           go to state 59
    simple_expression  go to state 101
    term               go to state 62
    factor             go to state 63


State 85

   52 term: term MULOP • factor

    ID   shift, and go to state 54
    NUM  shift, and go to state 55
    NOT  shift, and go to state 57
    '('  shift, and go to state 58

    variable  go to state 59
    factor    go to state 102


State 86

   27 statement_list: statement_list ';' statement •

    $default  reduce using rule 27 (statement_list)


State 87

   38 statement: @8 WHILE @9 • expression DO @10 statement

    ID     shift, and go to state 54
    NUM    shift, and go to state 55
    ADDOP  shift, and go to state 56
    NOT    shift, and go to state 57
    '('    shift, and go to state 58

    variable           go to state 59
    expression         go to state 103
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


State 88

   28 statement: variable ASSIGN expression •

    $default  reduce using rule 28 (statement)


State 89

   22 parametr: identifier_list ':' • type

    INT   shift, and go to state 28
    REAL  shift, and go to state 29

    type           go to state 104
    standerd_type  go to state 31


State 90

   18 arguments: '(' parametr_list ')' •

    $default  reduce using rule 18 (arguments)


State 91

   21 parametr_list: parametr_list ';' • parametr

    ID  shift, and go to state 6

    identifier_list  go to state 69
    parametr         go to state 105


State 92

   15 subprogram_head: FUNCTION ID $@3 arguments ':' standerd_type • ';'

    ';'  shift, and go to state 106


State 93

   43 procedure_statement: ID '(' expression_list ')' •

    $default  reduce using rule 43 (procedure_statement)


State 94

   45 expression_list: expression_list ',' • expression

    ID     shift, and go to state 54
    NUM    shift, and go to state 55
    ADDOP  shift, and go to state 56
    NOT    shift, and go to state 57
    '('    shift, and go to state 58

    variable           go to state 59
    expression         go to state 107
    simple_expression  go to state 61
    term               go to state 62
    factor             go to state 63


State 95

   40 statement: WRITE '(' expression_list ')' •

    $default  reduce using rule 40 (statement)


State 96

   39 statement: READ '(' expression_list ')' •

    $default  reduce using rule 39 (statement)


State 97

   45 expression_list: expression_list • ',' expression
   54 factor: ID '(' expression_list • ')'

    ')'  shift, and go to state 108
    ','  shift, and go to state 94


State 98

   56 factor: '(' expression ')' •

    $default  reduce using rule 56 (factor)


State 99

   34 statement: IF expression @5 THEN • @6 statement ELSE @7 statement

    $default  reduce using rule 32 (@6)

    @6  go to state 109


State 100

   50 simple_expression: simple_expression ADDOP term •
   52 term: term • MULOP factor

    MULOP  shift, and go to state 85

    $default  reduce using rule 50 (simple_expression)


State 101

   47 expression: simple_expression RELOP simple_expression •
   50 simple_expression: simple_expression • ADDOP term

    ADDOP  shift, and go to state 83

    $default  reduce using rule 47 (expression)


State 102

   52 term: term MULOP factor •

    $default  reduce using rule 52 (term)


State 103

   38 statement: @8 WHILE @9 expression • DO @10 statement

    DO  shift, and go to state 110


State 104

   22 parametr: identifier_list ':' type •

    $default  reduce using rule 22 (parametr)


State 105

   21 parametr_list: parametr_list ';' parametr •

    $default  reduce using rule 21 (parametr_list)


State 106

   15 subprogram_head: FUNCTION ID $@3 arguments ':' standerd_type ';' •

    $default  reduce using rule 15 (subprogram_head)


State 107

   45 expression_list: expression_list ',' expression •

    $default  reduce using rule 45 (expression_list)


State 108

   54 factor: ID '(' expression_list ')' •

    $default  reduce using rule 54 (factor)


State 109

   34 statement: IF expression @5 THEN @6 • statement ELSE @7 statement

    ID     shift, and go to state 34
    BEG    shift, and go to state 24
    WRITE  shift, and go to state 35
    READ   shift, and go to state 36
    IF     shift, and go to state 37

    $default  reduce using rule 35 (@8)

    compound_statement   go to state 38
    statement            go to state 111
    @8                   go to state 42
    variable             go to state 43
    procedure_statement  go to state 44


State 110

   38 statement: @8 WHILE @9 expression DO • @10 statement

    $default  reduce using rule 37 (@10)

    @10  go to state 112


State 111

   34 statement: IF expression @5 THEN @6 statement • ELSE @7 statement

    ELSE  shift, and go to state 113


State 112

   38 statement: @8 WHILE @9 expression DO @10 • statement

    ID     shift, and go to state 34
    BEG    shift, and go to state 24
    WRITE  shift, and go to state 35
    READ   shift, and go to state 36
    IF     shift, and go to state 37

    $default  reduce using rule 35 (@8)

    compound_statement   go to state 38
    statement            go to state 114
    @8                   go to state 42
    variable             go to state 43
    procedure_statement  go to state 44


State 113

   34 statement: IF expression @5 THEN @6 statement ELSE • @7 statement

    $default  reduce using rule 33 (@7)

    @7  go to state 115


State 114

   38 statement: @8 WHILE @9 expression DO @10 statement •

    $default  reduce using rule 38 (statement)


State 115

   34 statement: IF expression @5 THEN @6 statement ELSE @7 • statement

    ID     shift, and go to state 34
    BEG    shift, and go to state 24
    WRITE  shift, and go to state 35
    READ   shift, and go to state 36
    IF     shift, and go to state 37

    $default  reduce using rule 35 (@8)

    compound_statement   go to state 38
    statement            go to state 116
    @8                   go to state 42
    variable             go to state 43
    procedure_statement  go to state 44


State 116

   34 statement: IF expression @5 THEN @6 statement ELSE @7 statement •

    $default  reduce using rule 34 (statement)
